------------------------------------------------ REGISTER AND LOGIN

/includes/db.php:

<?php
$host = 'localhost';
$username = 'u870796977_error414';
$password = 'AriesDave7';
$database = 'u870796977_municihelp';

$conn = new mysqli($host, $username, $password, $database);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Set MySQL timezone to Asia/Manila (UTC+8)
$conn->query("SET time_zone = '+08:00'");

$cleanup = $conn->prepare("DELETE FROM users WHERE is_verified = 0 AND created_at < DATE_SUB(NOW(), INTERVAL 5 MINUTE)");
$cleanup->execute();
$cleanup->close();
?>


/includes/send_sms.php:

<?php
function sendSMS($message, $phone_number) {
    // API configuration
    $api_url = "https://app.philsms.com/api/v3/sms/send";
    $api_token = "2247|yZcPiU2uYQfWwavxVPG3xmPwlwUuv5Tq9dv1AhUr";
    $sender_id = "PhilSMS";

    // Handle array of phone numbers or single number
    $numbers = is_array($phone_number) ? $phone_number : [$phone_number];
    $formatted_numbers = [];
    
    foreach ($numbers as $number) {
        $cleaned_number = preg_replace('/[^0-9]/', '', $number);
        
        if (substr($cleaned_number, 0, 2) === '63' && strlen($cleaned_number) === 12) {
            $formatted_numbers[] = '+' . $cleaned_number;
        } elseif (substr($cleaned_number, 0, 1) === '0' && strlen($cleaned_number) === 11) {
            $formatted_numbers[] = '+63' . substr($cleaned_number, 1);
        } elseif (substr($cleaned_number, 0, 1) === '9' && strlen($cleaned_number) === 10) {
            $formatted_numbers[] = '+63' . $cleaned_number;
        } elseif (substr($number, 0, 3) === '+63' && strlen($cleaned_number) === 12) {
            $formatted_numbers[] = $number;
        }
    }

    // Match the $send_data structure
    $send_data = [
        'sender_id' => $sender_id,
        'recipient' => implode(',', $formatted_numbers),
        'message'   => $message
    ];
    
    $parameters = json_encode($send_data);

    // Initialize cURL
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $api_url);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    // Set headers
    $headers = [
        "Content-Type: application/json",
        "Authorization: Bearer $api_token"
    ];
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    // Execute the request
    $get_sms_status = curl_exec($ch);

    if (curl_errno($ch)) {
        $error_msg = curl_error($ch);
        curl_close($ch);
        return [
            'status' => 'error',
            'message' => "cURL Error: $error_msg",
            'formatted_numbers' => $formatted_numbers
        ];
    }

    curl_close($ch);

    $result = json_decode($get_sms_status, true);
    $result['formatted_numbers'] = $formatted_numbers;
    return $result;
}
?>


/mayor/barangay/index.php:

<?php
session_start();
include '../../includes/db.php';

// Check if barangay admin is logged in
if (!isset($_SESSION['barangay_admin_id'])) {
    header("Location: ../../includes/auth/login.php");
    exit();
}

// Get barangay admin info
$barangay_admin_id = $_SESSION['barangay_admin_id'];
$admin_query = $conn->prepare("SELECT a.name, a.department_id, d.name as department_name 
                              FROM admins a 
                              LEFT JOIN departments d ON a.department_id = d.id 
                              WHERE a.id = ?");
$admin_query->bind_param("i", $barangay_admin_id);
$admin_query->execute();
$admin_result = $admin_query->get_result();
$admin_data = $admin_result->fetch_assoc();

if (!$admin_data) {
    die("Admin not found");
}

$admin_name = $admin_data['name'] ?? 'Barangay Admin';
$department_id = $admin_data['department_id'];
$department_name = $admin_data['department_name'];

// Since departments represent barangays, we need to find the corresponding barangay_id
// Let's assume the department name matches the barangay name
$barangay_query = $conn->prepare("SELECT id, name FROM barangays WHERE name = ?");
$barangay_query->bind_param("s", $department_name);
$barangay_query->execute();
$barangay_result = $barangay_query->get_result();
$barangay_data = $barangay_result->fetch_assoc();

if (!$barangay_data) {
    // If no direct match, try to find a barangay with a similar name
    // This is a fallback approach
    $similar_query = $conn->prepare("SELECT id, name FROM barangays WHERE name LIKE ?");
    $similar_name = "%" . $department_name . "%";
    $similar_query->bind_param("s", $similar_name);
    $similar_query->execute();
    $similar_result = $similar_query->get_result();
    $barangay_data = $similar_result->fetch_assoc();
    
    if (!$barangay_data) {
        die("Barangay not found for department: " . htmlspecialchars($department_name));
    }
}

$barangay_id = $barangay_data['id'];
$barangay_name = $barangay_data['name'];

function formatPhoneNumber($phone) {
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Get all barangays for filter (only departments with parent_id=1 AND excluding IDs 2-6)
$barangays_query = $conn->query("SELECT id, name FROM departments WHERE parent_id = 1 AND id NOT IN (1,2,3,4,5,6) ORDER BY name");
$barangays = [];
while ($row = $barangays_query->fetch_assoc()) {
    $barangays[$row['id']] = $row['name'];
}

// Filter handling - MODIFIED: Only show users from the current barangay
$where = ["u.barangay_id = ?"];
$params = [$barangay_id];
$types = 'i';

if (isset($_GET['search']) && !empty($_GET['search'])) {
    $search = '%' . $_GET['search'] . '%';
    $where[] = "(CONCAT(u.name, ' ', COALESCE(u.middle_name, ''), ' ', u.last_name) LIKE ? OR u.id = ? OR u.phone LIKE ?)";
    $params[] = $search;
    $params[] = $_GET['search'];
    $params[] = '%' . $_GET['search'] . '%';
    $types .= 'sss';
}

if (isset($_GET['date']) && !empty($_GET['date'])) {
    $where[] = "DATE(u.created_at) = ?";
    $params[] = $_GET['date'];
    $types .= 's';
}

$whereClause = $where ? "WHERE " . implode(" AND ", $where) : "";

// Get admin account
$admin_account_query = $conn->prepare("
    SELECT a.id, a.name, a.phone, a.department_id, d.name as barangay_name, a.created_at 
    FROM admins a 
    JOIN departments d ON a.department_id = d.id
    WHERE a.id = ?
");
$admin_account_query->bind_param("i", $barangay_admin_id);
$admin_account_query->execute();
$admin_account = $admin_account_query->get_result()->fetch_assoc();

// Get user accounts with filters - MODIFIED: Only users from current barangay
$users_query = $conn->prepare("
    SELECT 
        u.id, 
        u.name,
        u.middle_name,
        u.last_name,
        u.birthday, 
        u.phone, 
        u.address,  -- ADD THIS LINE
        u.barangay_id, 
        b.name as barangay_name, 
        a.name as created_by, 
        u.created_at 
    FROM users u 
    LEFT JOIN barangays b ON u.barangay_id = b.id
    LEFT JOIN admins a ON u.createdby_admin_id = a.id
    $whereClause
    ORDER BY u.created_at DESC
");

if (!empty($params)) {
    $users_query->bind_param($types, ...$params);
}

$users_query->execute();
$users = $users_query->get_result();

$pageTitle = 'User Management';
include '../../includes/header.php';
?>


/mayor/barangay/save_user.php:

<?php
session_start();
include '../../includes/db.php';
require '../../includes/send_sms.php'; // Include SMS functionality

// Check if barangay admin is logged in
if (!isset($_SESSION['barangay_admin_id'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'Unauthorized access']);
    exit();
}

// Initialize response array
$response = ['success' => false, 'message' => ''];

try {
    // Validate required fields
    if (empty($_POST['name']) || empty($_POST['last_name']) || empty($_POST['phone']) || empty($_POST['birthday']) || empty($_POST['address'])) {
        throw new Exception('First name, last name, phone, birthday, and address are required');
    }

    // Sanitize inputs
    $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    $name = trim($_POST['name']);
    $middle_name = isset($_POST['middle_name']) ? trim($_POST['middle_name']) : '';
    $last_name = trim($_POST['last_name']);
    $birthday = trim($_POST['birthday']);
    $address = trim($_POST['address']);
    $phone = trim($_POST['phone']);
    $barangay_id = isset($_POST['barangay_id']) ? intval($_POST['barangay_id']) : null;

    // Get the barangay admin's department_id (which represents their barangay)
    $admin_id = $_SESSION['barangay_admin_id'];
    $admin_query = $conn->prepare("SELECT department_id FROM admins WHERE id = ?");
    $admin_query->bind_param("i", $admin_id);
    $admin_query->execute();
    $admin_result = $admin_query->get_result();
    $admin_data = $admin_result->fetch_assoc();
    
    if (!$admin_data || !$admin_data['department_id']) {
        throw new Exception('Admin department not found');
    }
    
    $department_id = $admin_data['department_id'];

    // Validate phone format (should be +639XXXXXXXXX)
    if (!preg_match('/^\+63\d{10}$/', $phone)) {
        throw new Exception('Phone number must be in the format +639XXXXXXXXX (12 digits total)');
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $birthday)) {
        throw new Exception('Birthday must be in YYYY-MM-DD format');
    }

    // Handle regular user account updates
    $checkPhone = $conn->prepare("SELECT id FROM users WHERE phone = ? AND id != ?");
    $checkPhone->bind_param("si", $phone, $id);
    $checkPhone->execute();
    $checkPhone->store_result();

    if ($checkPhone->num_rows > 0) {
        throw new Exception('Phone number already exists for another user');
    }

    if ($id > 0) {
        // Update existing user - set is_verified to 1
        $stmt = $conn->prepare("UPDATE users SET name = ?, middle_name = ?, last_name = ?, birthday = ?, address = ?, phone = ?, barangay_id = ?, department_id = ?, is_verified = 1 WHERE id = ?");
        $stmt->bind_param("ssssssiii", $name, $middle_name, $last_name, $birthday, $address, $phone, $barangay_id, $department_id, $id);
        
        if ($stmt->execute()) {
            $response['success'] = true;
            $response['message'] = 'User updated successfully';
        } else {
            throw new Exception('Database error: ' . $stmt->error);
        }
    } else {
        // Create new user - generate 8-character random password
        $password = generateRandomPassword(8);
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        
        $createdby_admin_id = $_SESSION['barangay_admin_id'];
        // In the INSERT statement for new users, add the is_temp_password flag
$stmt = $conn->prepare("INSERT INTO users (name, middle_name, last_name, birthday, address, phone, password_hash, barangay_id, department_id, createdby_admin_id, is_verified, is_temp_password) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 1, 1)");
        $stmt->bind_param("sssssssiii", $name, $middle_name, $last_name, $birthday, $address, $phone, $hashed_password, $barangay_id, $department_id, $createdby_admin_id);
        
        if ($stmt->execute()) {
            // Send password via SMS
            $message = "Welcome to MuniciHelp! Your temporary password is: $password\n";
            $message .= "Please change it after login.";
             
            $phone_numbers = [$phone];
            
            $smsResponse = sendSMS($message, $phone_numbers);
            
            if ($smsResponse !== false) {
                $response['success'] = true;
                $response['message'] = 'User created successfully. Temporary password sent via SMS.';
            } else {
                // If SMS fails, we still created the user but need to inform admin
                $response['success'] = true;
                $response['message'] = 'User created but failed to send SMS with password. Please contact the user directly.';
            }
        } else {
            throw new Exception('Database error: ' . $stmt->error);
        }
    }

    $stmt->close();
} catch (Exception $e) {
    $response['message'] = $e->getMessage();
}

header('Content-Type: application/json');
echo json_encode($response);

// Function to generate random password
function generateRandomPassword($length = 8) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()';
    $password = '';
    for ($i = 0; $i < $length; $i++) {
        $password .= $chars[rand(0, strlen($chars) - 1)];
    }
    return $password;
}
?>


/includes/auth/login.php:

<?php
session_start();
include '../db.php';

// Redirect if already logged in as a user
if (isset($_SESSION['user_id'])) {
    header("Location: ../../user/dashboard.php");
    exit();
}

// Redirect if already logged in as any admin
if (
    isset($_SESSION['mayor_superadmin_id']) ||
    isset($_SESSION['mswd_admin_id']) ||
    isset($_SESSION['mayor_admin_id']) ||
    isset($_SESSION['pwd_admin_id']) ||
    isset($_SESSION['animal_admin_id']) ||
    isset($_SESSION['pound_admin_id']) ||
    isset($_SESSION['vice_mayor_superadmin_id']) ||
    isset($_SESSION['assistance_admin_id']) ||
    isset($_SESSION['ambulance_admin_id']) ||
    isset($_SESSION['barangay_admin_id'])  // Added barangay admin
) {
    if (isset($_SESSION['admin_department_path'])) {
        header("Location: ../../" . $_SESSION['admin_department_path']);
    } else {
        header("Location: ../../admin/dashboard.php");
    }
    exit();
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $inputPhone = trim($_POST['phone']);
    $password = $_POST['password'];

    // Format phone number to +63 format
    $phone = $inputPhone;
    if (strpos($phone, '+63') !== 0) {
        $phone = ltrim($phone, '0');
        $phone = ltrim($phone, '63');
        $phone = '+63' . $phone;
    }

    if (!preg_match('/^\+63\d{10}$/', $phone)) {
        $error = "Please enter a valid 10-digit Philippine mobile number (e.g., 9123456789)";
    } else {
        // === ADMIN LOGIN CHECK ===
        $admin_stmt = $conn->prepare("
            SELECT a.id, a.password, a.name, a.department_id, d.path 
            FROM admins a 
            JOIN departments d ON a.department_id = d.id 
            WHERE a.phone = ?
        ");
        if (!$admin_stmt) die("DB error: " . $conn->error);

        $admin_stmt->bind_param("s", $phone);
        $admin_stmt->execute();
        $admin_result = $admin_stmt->get_result();

        if ($admin_result->num_rows > 0) {
            $admin = $admin_result->fetch_assoc();

            if (password_verify($password, $admin['password'])) {
                // Common admin session vars
                $_SESSION['admin_department_id'] = $admin['department_id'];
                $_SESSION['admin_department_path'] = $admin['path'];
                $_SESSION['admin_phone'] = $phone;
                $_SESSION['admin_name'] = $admin['name'];

                // Role-specific session assignment
                switch ($admin['department_id']) {
                    case 1: // Mayor Superadmin
                        $_SESSION['mayor_superadmin_id'] = $admin['id'];
                        break;
                    case 2: // MSWD
                        $_SESSION['mswd_admin_id'] = $admin['id'];
                        break;
                    case 3: // Mayor Admin
                        $_SESSION['mayor_admin_id'] = $admin['id'];
                        break;
                    case 4: // PWD
                        $_SESSION['pwd_admin_id'] = $admin['id'];
                        break;
                    case 5: // Animal Control
                        $_SESSION['animal_admin_id'] = $admin['id'];
                        break;
                    case 6: // Pound Admin
                        $_SESSION['pound_admin_id'] = $admin['id'];
                        break;
                    case 7: // Vice Mayor Superadmin
                        $_SESSION['vice_mayor_superadmin_id'] = $admin['id'];
                        break;
                    case 8: // Assistance
                        $_SESSION['assistance_admin_id'] = $admin['id'];
                        break;
                    case 9: // Ambulance
                        $_SESSION['ambulance_admin_id'] = $admin['id'];
                        break;
                    default: // Barangay Admins (IDs 17-35)
                        if ($admin['department_id'] >= 17 && $admin['department_id'] <= 35) {
                            $_SESSION['barangay_admin_id'] = $admin['id'];
                        }
                        break;
                }

                $admin_stmt->close();
                header("Location: ../../" . $admin['path']);
                exit();
            } else {
                $error = "Invalid phone number or password";
            }
        }
        $admin_stmt->close();

        // === USER LOGIN CHECK ===
$user_stmt = $conn->prepare("SELECT id, password_hash, is_verified, phone, is_temp_password FROM users WHERE phone = ?");
if (!$user_stmt) die("DB error: " . $conn->error);

$user_stmt->bind_param("s", $phone);
$user_stmt->execute();
$user_result = $user_stmt->get_result();

if ($user_result->num_rows > 0) {
    $user = $user_result->fetch_assoc();

    if (password_verify($password, $user['password_hash'])) {
        if (!$user['is_verified']) {
            $_SESSION['phone'] = $phone;
            $user_stmt->close();
            header("Location: verify.php");
            exit();
        }

        // === Check if still using temporary password ===
        if ($user['is_temp_password'] == 1) {
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['force_password_change'] = true;
            $user_stmt->close();
            header("Location: ../../user/change_password.php");
            exit();
        }

        // === Normal login ===
        $_SESSION['user_id'] = $user['id'];
        $user_stmt->close();
        header("Location: ../../index.php");
        exit();
    } else {
        $error = "Invalid phone number or password";
    }
} else {
    $error = "Invalid phone number or password";
}
$user_stmt->close();

    }
}

// Fetch walk-in programs from database
$walkinPrograms = [];
$programQuery = $conn->query("
    SELECT mt.id, mt.name, mt.parent_id, mt.is_online, 
           d.name as department_name, d.path as department_path
    FROM mswd_types mt
    JOIN departments d ON d.id = CASE 
        WHEN mt.parent_id IS NULL THEN 2  -- Default to MSWD for parent programs
        ELSE 2
    END
    WHERE mt.is_online = 0
    ORDER BY mt.parent_id IS NULL DESC, mt.parent_id, mt.name
");

if ($programQuery && $programQuery->num_rows > 0) {
    while ($program = $programQuery->fetch_assoc()) {
        // Get requirements for this program
        $reqQuery = $conn->prepare("
            SELECT name 
            FROM mswd_types_requirements 
            WHERE mswd_types_id = ?
        ");
        $reqQuery->bind_param("i", $program['id']);
        $reqQuery->execute();
        $reqResult = $reqQuery->get_result();
        
        $requirements = [];
        while ($req = $reqResult->fetch_assoc()) {
            $requirements[] = $req['name'];
        }
        $reqQuery->close();
        
        $program['requirements'] = $requirements;
        
        if ($program['parent_id'] === null) {
            // This is a parent program
            $walkinPrograms[$program['id']] = $program;
            $walkinPrograms[$program['id']]['sub_programs'] = [];
        } else {
            // This is a sub-program, add to parent
            if (isset($walkinPrograms[$program['parent_id']])) {
                $walkinPrograms[$program['parent_id']]['sub_programs'][] = $program;
            }
        }
    }
}

// Hardcoded PWD programs (all walk-in)
$pwdPrograms = [
    [
        'id' => 'pwd-1',
        'name' => 'Financial Assistance',
        'sub_programs' => [
            [
                'id' => 'pwd-101',
                'name' => 'Birthday Cash Give',
                'requirements' => ['Registered PWD ID']
            ],
            [
                'id' => 'pwd-102',
                'name' => 'In-School PWD',
                'requirements' => [
                    'PWD ID',
                    'Certificate of Enrollment',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 'pwd-103',
                'name' => 'SPED',
                'requirements' => [
                    'PWD ID',
                    'Certificate of Enrollment',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 'pwd-104',
                'name' => 'Alay ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 'pwd-105',
                'name' => 'Malasakit ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Certificate of therapy',
                    'Parent ID'
                ]
            ],
            [
                'id' => 'pwd-106',
                'name' => 'Kalinga ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Student ID',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 'pwd-107',
                'name' => 'Burial',
                'requirements' => ['Death certificate']
            ]
        ]
    ]
];

$pageTitle = 'Login';
$isAuthPage = true;
include '../../includes/header_simple.php';
?>


/includes/auth/verify.php:

<?php
session_start();
include '../db.php';

if (!isset($_SESSION['otp_verification'])) {
    header("Location: login.php");
    exit();
}

$verification = $_SESSION['otp_verification'];
$phone = $verification['phone'];
$type = $verification['type']; 

// Check if OTP is already expired
$is_expired = false;
$remaining_time = 0;

if ($type === 'registration') {
    $stmt = $conn->prepare("SELECT otp_expiry FROM users WHERE phone = ? AND is_verified = 0");
    $stmt->bind_param("s", $phone);
} else if ($type === 'login') {
    $id = $verification['id'];
    $stmt = $conn->prepare("SELECT otp_expiry FROM users WHERE id = ?");
    $stmt->bind_param("i", $id);
} else { // password_reset
    $stmt = $conn->prepare("SELECT otp_expiry FROM users WHERE phone = ?");
    $stmt->bind_param("s", $phone);
}

$stmt->execute();
$stmt->bind_result($otp_expiry);
$stmt->fetch();
$stmt->close();

// Calculate remaining time in seconds
$remaining_time = strtotime($otp_expiry) - time();
if ($remaining_time < 0) {
    $remaining_time = 0; // Already expired
    $is_expired = true;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $otp = implode('', $_POST['otp']);
    
    // Check if OTP is expired first
    if ($is_expired) {
        $_SESSION['otp_error'] = "OTP has expired. Please request a new one.";
        header("Location: verify.php");
        exit();
    } else {
        // Direct verification instead of using cURL
        if ($type === 'password_reset') {
            // Handle password reset verification
            $stmt = $conn->prepare("SELECT id, otp_hash, otp_expiry FROM users WHERE phone = ?");
            $stmt->bind_param("s", $phone);
            $stmt->execute();
            $stmt->bind_result($id, $otp_hash, $otp_expiry);
            $stmt->fetch();
            $stmt->close();

            // Check if OTP is expired
            if (strtotime($otp_expiry) < time()) {
                $_SESSION['otp_error'] = "OTP has expired. Please request a new one.";
                header("Location: verify.php");
                exit();
            } elseif ($otp_hash && password_verify($otp, $otp_hash)) {
                $_SESSION['password_reset_user'] = $id;
                unset($_SESSION['otp_verification']);
                header("Location: reset_password.php");
                exit();
            } else {
                $_SESSION['otp_error'] = "Invalid OTP. Please try again.";
                header("Location: verify.php");
                exit();
            }
        } else {
            // Handle registration/login verification
            if ($type === 'registration') {
                $stmt = $conn->prepare("SELECT id, otp_hash, otp_expiry FROM users WHERE phone = ? AND is_verified = 0");
                $stmt->bind_param("s", $phone);
            } else { // login
                $id = $verification['id'];
                $stmt = $conn->prepare("SELECT otp_hash, otp_expiry FROM users WHERE id = ?");
                $stmt->bind_param("i", $id);
            }
            
            $stmt->execute();
            $stmt->bind_result($id, $otp_hash, $otp_expiry);
            $stmt->fetch();
            $stmt->close();

            // Check if OTP is expired
            if (strtotime($otp_expiry) < time()) {
                $_SESSION['otp_error'] = "OTP has expired. Please request a new one.";
                header("Location: verify.php");
                exit();
            } elseif ($otp_hash && password_verify($otp, $otp_hash)) {
                if ($type === 'registration') {
                    // Mark account as verified
                    $update = $conn->prepare("UPDATE users SET is_verified = 1, otp_hash = NULL, otp_expiry = NULL WHERE id = ?");
                    $update->bind_param("i", $id);
                    $update->execute();
                    $update->close();
                }

                $_SESSION['user_id'] = $id;
                unset($_SESSION['otp_verification']);
                header("Location: ../../index.php");
                exit();
            } else {
                $_SESSION['otp_error'] = "Invalid OTP. Please try again.";
                header("Location: verify.php");
                exit();
            }
        }
    }
}

$pageTitle = 'Verify OTP';
$isAuthPage = true;
include '../../includes/header.php';

// Get any error message from session
$error = isset($_SESSION['otp_error']) ? $_SESSION['otp_error'] : '';
$error_type = '';
if ($error) {
    if (strpos($error, 'expired') !== false) {
        $error_type = 'warning';
    } elseif (strpos($error, 'Invalid') !== false) {
        $error_type = 'danger';
    }
    unset($_SESSION['otp_error']);
}

function maskPhone($phone) {
    // Example: +639934253236 -> +6399****3236
    if (preg_match('/^\+63\d{10}$/', $phone)) {
        $first = substr($phone, 0, 5); // +6399
        $last = substr($phone, -4);    // 3236
        return $first . '****' . $last;
    }
    return $phone; // fallback if not valid format
}

$maskedPhone = maskPhone($phone);
?>


------------------------------------------------ USER PANEL


/mayor/mswd/index.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_query = $conn->prepare("SELECT name, middle_name, last_name, birthday, address, barangay_id FROM users WHERE id = ?");
$user_query->bind_param("i", $user_id);
$user_query->execute();
$user_result = $user_query->get_result();
$user_data = $user_result->fetch_assoc();

// Format birthday to YYYY-MM-DD for date input
$formatted_birthday = '';
if (!empty($user_data['birthday'])) {
    $formatted_birthday = date('Y-m-d', strtotime($user_data['birthday']));
}

// Get barangay name from barangay_id
$barangay_name = '';
if (!empty($user_data['barangay_id'])) {
    $barangay_query = $conn->prepare("SELECT name FROM barangays WHERE id = ?");
    $barangay_query->bind_param("i", $user_data['barangay_id']);
    $barangay_query->execute();
    $barangay_result = $barangay_query->get_result();
    if ($barangay_row = $barangay_result->fetch_assoc()) {
        $barangay_name = $barangay_row['name'];
    }
}

$pageTitle = "MSWD - Form";
include '../../includes/header.php';

// Get all assistance types (parent programs)
$all_assistance_types = $conn->query("SELECT * FROM mswd_types WHERE parent_id IS NULL")->fetch_all(MYSQLI_ASSOC);

// Map program id => program
$programMap = [];
foreach ($all_assistance_types as $type) {
    $programMap[$type['id']] = $type;
}

$sorted_online = [];
$sorted_walkin = [];

// Sort programs based on new structure
foreach ($programMap as $id => $program) {
    // Online programs (IDs 1-16)
    if ($id >= 1 && $id <= 16) {
        $sorted_online[] = $program;
    } 
    // Walk-in programs (IDs 17-32)
    elseif ($id > 16) {
        $sorted_walkin[] = $program;
    }
}

// Fetch sub-programs (children)
$sub_programs = $conn->query("SELECT * FROM mswd_types WHERE parent_id IS NOT NULL")->fetch_all(MYSQLI_ASSOC);

// Fetch requirements
$mswd_requirements = $conn->query("SELECT * FROM mswd_types_requirements")->fetch_all(MYSQLI_ASSOC);

// Fetch barangays
$barangays = $conn->query("SELECT * FROM barangays ORDER by name")->fetch_all(MYSQLI_ASSOC);

// Get current Sulong Dulong beneficiary count - ONLY ACTIVE
$sulongDulongCount = $conn->query("SELECT COUNT(*) as total FROM sulong_dulong_beneficiaries WHERE status = 'Active'")->fetch_assoc()['total'];
$maxBeneficiaries = 800;
$sulongDulongLeft = $maxBeneficiaries - $sulongDulongCount;

// Get equipment availability
$equipment_availability = $conn->query("
    SELECT t.id, t.name, ei.available_quantity 
    FROM mswd_types t 
    LEFT JOIN equipment_inventory ei ON t.id = ei.equipment_type_id 
    WHERE t.parent_id = 8
")->fetch_all(MYSQLI_ASSOC);

// Helper to check if program has children
function has_children($type_id, $sub_programs) {
    foreach ($sub_programs as $sub) {
        if ($sub['parent_id'] == $type_id) return true;
    }
    return false;
}
?>


/mayor/mswd/check_existing_request.php:

<?php
session_start();
require_once '../../includes/db.php';

header('Content-Type: application/json');

$response = [
    'exists' => false,
    'message' => '',
    'error' => null,
    'status' => null,
    'days_left' => null,
    'is_sulong_dulong_beneficiary' => false,
    'is_blocked' => false
];

try {
    // Validate required fields
    $requiredFields = ['first_name', 'last_name', 'barangay_id', 'birthday', 'assistance_id'];
    foreach ($requiredFields as $field) {
        if (empty($_POST[$field])) {
            throw new Exception("Missing required field: $field");
        }
    }

    $firstName = trim($_POST['first_name']);
    $middleName = trim($_POST['middle_name'] ?? '');
    $lastName = trim($_POST['last_name']);
    $barangayId = (int)$_POST['barangay_id'];
    $birthday = trim($_POST['birthday']);
    $assistanceId = (int)$_POST['assistance_id'];

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $birthday)) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Check if this is a Sulong Dulong request (IDs 33, 34, 35)
    $isSulongDulongRequest = in_array($assistanceId, [33, 34, 35]);

    // Check beneficiary limit for Sulong Dulong (max 800) - Only count ACTIVE beneficiaries
    if ($isSulongDulongRequest) {
        $countQuery = "SELECT COUNT(*) as total FROM sulong_dulong_beneficiaries WHERE status = 'Active'";
        $countResult = $conn->query($countQuery);
        $totalBeneficiaries = $countResult->fetch_assoc()['total'];

        if ($totalBeneficiaries >= 800) {
            $response['exists'] = true;
            $response['message'] = "We have reached the maximum number of Sulong Dunong beneficiaries (800). No more applications can be accepted at this time.";
            echo json_encode($response);
            exit;
        }
    }

    // ========== CRITICAL CHANGE: CHECK BENEFICIARY STATUS FIRST ==========
    
    // For Sulong Dulong requests, check beneficiary status BEFORE checking pending requests
    if ($isSulongDulongRequest) {
        // FIRST: Check if person is BLOCKED (only for Sulong Dulong requests)
        $blockedCheckQuery = "
            SELECT id 
            FROM sulong_dulong_beneficiaries 
            WHERE first_name = ? 
            AND last_name = ? 
            AND barangay_id = ?
            AND birthday = ?
            AND status = 'Blocked'
        ";

        $blockedParams = [$firstName, $lastName, $barangayId, $birthday];
        $blockedTypes = "ssis";

        // Include middle name if provided
        if (!empty($middleName)) {
            $blockedCheckQuery = str_replace(
                "WHERE first_name = ?", 
                "WHERE first_name = ? AND middle_name = ?", 
                $blockedCheckQuery
            );
            array_splice($blockedParams, 1, 0, $middleName);
            $blockedTypes = "sssis";
        }

        $stmt = $conn->prepare($blockedCheckQuery);
        if (!$stmt) {
            throw new Exception("Database error: " . $conn->error);
        }
        
        $stmt->bind_param($blockedTypes, ...$blockedParams);
        $stmt->execute();
        $blockedResult = $stmt->get_result();

        if ($blockedResult->num_rows > 0) {
            $response['exists'] = true;
            $response['is_blocked'] = true;
            $response['message'] = "You are blocked from applying for Sulong Dunong assistance. Please contact the MSWD office for more information.";
            echo json_encode($response);
            exit;
        }

        // SECOND: Check if person is already an active beneficiary
        $beneficiaryQuery = "
            SELECT id, duration, status
            FROM sulong_dulong_beneficiaries 
            WHERE first_name = ? 
            AND last_name = ? 
            AND barangay_id = ?
            AND birthday = ?
            AND status = 'Active'
        ";

        $beneficiaryParams = [$firstName, $lastName, $barangayId, $birthday];
        $beneficiaryTypes = "ssis";

        // Include middle name if provided
        if (!empty($middleName)) {
            $beneficiaryQuery = str_replace(
                "WHERE first_name = ?", 
                "WHERE first_name = ? AND middle_name = ?", 
                $beneficiaryQuery
            );
            array_splice($beneficiaryParams, 1, 0, $middleName);
            $beneficiaryTypes = "sssis";
        }

        $stmt = $conn->prepare($beneficiaryQuery);
        if (!$stmt) {
            throw new Exception("Database error: " . $conn->error);
        }
        
        $stmt->bind_param($beneficiaryTypes, ...$beneficiaryParams);
        $stmt->execute();
        $beneficiaryResult = $stmt->get_result();

        if ($beneficiaryResult->num_rows > 0) {
            $beneficiary = $beneficiaryResult->fetch_assoc();
            
            // ID 33 - Monthly (cannot apply for any Sulong Dulong program)
            if ($beneficiary['duration'] === 'Every Month') {
                $response['exists'] = true;
                $response['is_sulong_dulong_beneficiary'] = true;
                $response['message'] = "You are already registered as a Monthly Sulong Dunong beneficiary and cannot apply for any other Sulong Dunong program. If you wish to renew it, please proceed to the MSWD Department and bring the necessary requirements.";
                echo json_encode($response);
                exit;
            }
            // ID 34 - Per Sem (cannot apply for any Sulong Dulong program)
            elseif ($beneficiary['duration'] === 'Per Sem') {
                $response['exists'] = true;
                $response['is_sulong_dulong_beneficiary'] = true;
                $response['message'] = "You are already registered for Per Semester Sulong Dunong assistance and cannot apply for any other Sulong Dunong program. If you wish to renew it, please proceed to the MSWD Department and bring the necessary requirements.";
                echo json_encode($response);
                exit;
            }
        }
    }

    // ========== ONLY AFTER checking beneficiary status, check for pending requests ==========
    
    // Check for existing requests (applies to ALL assistance types)
    $query = "
        SELECT id, status, created_at, updated_at, assistance_id 
        FROM mswd_requests 
        WHERE first_name = ? 
        AND last_name = ? 
        AND barangay_id = ?
        AND birthday = ?
        AND (
            status IN ('pending', 'mayor_approved', 'mswd_approved') OR 
            (status = 'completed' AND updated_at >= DATE_SUB(NOW(), INTERVAL 90 DAY))
        )
        ORDER BY 
            CASE 
                WHEN status IN ('pending', 'mayor_approved', 'mswd_approved') THEN 0
                WHEN status = 'completed' THEN 1
                ELSE 2
            END,
            created_at DESC
        LIMIT 1
    ";

    $params = [$firstName, $lastName, $barangayId, $birthday];
    $types = "ssis";

    // Include middle name if provided
    if (!empty($middleName)) {
        $query = str_replace(
            "WHERE first_name = ?", 
            "WHERE first_name = ? AND middle_name = ?", 
            $query
        );
        array_splice($params, 1, 0, $middleName);
        $types = "sssis";
    }

    $stmt = $conn->prepare($query);
    if (!$stmt) {
        throw new Exception("Database error: " . $conn->error);
    }
    
    $stmt->bind_param($types, ...$params);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $status = $row['status'];
        $response['status'] = $status;
        
        if (in_array($status, ['pending', 'mayor_approved', 'mswd_approved'])) {
            $createdDate = new DateTime($row['created_at']);
            $currentDate = new DateTime();
            $interval = $currentDate->diff($createdDate);
            
            $response['exists'] = true;
            
            if ($status === 'pending') {
                $response['message'] = "You have a pending request submitted " . $interval->days . " days ago. Please wait for processing.";
            } 
            elseif ($status === 'mayor_approved') {
                $response['message'] = "Your request was approved by the mayor's office " . $interval->days . " days ago and is awaiting MSWD processing.";
            }
            elseif ($status === 'mswd_approved') {
                $response['message'] = "Your request was fully approved by MSWD " . $interval->days . " days ago.";
            }
        } 
        elseif ($status === 'completed') {
            $completedDate = new DateTime($row['updated_at']);
            $currentDate = new DateTime();
            $interval = $currentDate->diff($completedDate);
            
            if ($interval->days < 90) {
                $daysLeft = 90 - $interval->days;
                $response['exists'] = true;
                $response['message'] = "You can submit again after $daysLeft days from your last completed request.";
                $response['days_left'] = $daysLeft;
            }
        }
    }

} catch (Exception $e) {
    error_log("Error in check_existing_request.php: " . $e->getMessage());
    $response['error'] = "System error: " . $e->getMessage();
    $response['exists'] = true;
    $response['message'] = "System error occurred. Please try again later.";
    http_response_code(500);
}

echo json_encode($response);
?>


/mayor/mswd/submit_request.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

$response = ['success' => false, 'message' => ''];

try {
    // Validate required fields
    $required = [
        'first_name' => 'First name',
        'last_name' => 'Last name', 
        'birthday' => 'Birthday',
        'barangay_id' => 'Barangay',
        'complete_address' => 'Complete address',
        'assistance_id' => 'Assistance program'
    ];
    
    foreach ($required as $field => $fieldName) {
        if (empty($_POST[$field])) {
            throw new Exception("Please fill in: $fieldName");
        }
    }

    // Determine assistance_id and assistance_name
    $assistanceId = (int)$_POST['assistance_id'];
    $assistanceName = null;
    
    // Check if "Others" (id=16) is selected and has assistance_name
    if ($assistanceId == 16) {
        if (empty($_POST['assistance_name'])) {
            throw new Exception("Please specify the assistance you need");
        }
        $assistanceName = trim($_POST['assistance_name']);
    }

    // Check for sub-program if parent has children
    $subProgramId = null;
    $hasChildren = $conn->query("SELECT COUNT(*) as count FROM mswd_types WHERE parent_id = $assistanceId")->fetch_assoc()['count'];
    if ($hasChildren > 0) {
        if (empty($_POST['sub_program_id'])) {
            throw new Exception("Please select a sub-program");
        }
        $subProgramId = (int)$_POST['sub_program_id'];
        $subProgramCheck = $conn->query("SELECT id FROM mswd_types WHERE id = $subProgramId AND parent_id = $assistanceId");
        if ($subProgramCheck->num_rows === 0) {
            throw new Exception("Invalid sub-program selected");
        }
        // Use sub-program as the actual assistance
        $assistanceId = $subProgramId;
    }

    // Validate assistance type and check parent ID
    $assistanceCheck = $conn->query("
        SELECT id, is_online, parent_id 
        FROM mswd_types 
        WHERE id = $assistanceId
    ");
    if ($assistanceCheck->num_rows === 0) {
        throw new Exception("Invalid assistance type selected");
    }
    $assistanceData = $assistanceCheck->fetch_assoc();
    $isOnline = $assistanceData['is_online'];
    $parentId = $assistanceData['parent_id'];

    // Determine initial status
    $initialStatus = 'pending'; // Default status
    if ($parentId == 13) {
        $initialStatus = 'mayor_approved'; // Bypass mayor's office for these requests
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['birthday'])) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Prepare variables for database
    $birthday = date('Y-m-d', strtotime($_POST['birthday']));
    if ($birthday === false) {
        throw new Exception("Invalid birthday date");
    }

    $currentDate = new DateTime();
    $birthdayDate = new DateTime($birthday);
    $minDate = new DateTime('1900-01-01');

    if ($birthdayDate > $currentDate) {
        throw new Exception("Birthday cannot be in the future");
    }

    if ($birthdayDate < $minDate) {
        throw new Exception("Birthday is too far in the past");
    }

    // Prepare variables for database
    $firstName = trim($_POST['first_name']);
    $middleName = trim($_POST['middle_name'] ?? '');
    $lastName = trim($_POST['last_name']);
    $barangayId = (int)$_POST['barangay_id'];
    $completeAddress = trim($_POST['complete_address']);
    $userId = (int)$_SESSION['user_id'];
    $remarks = trim($_POST['remarks'] ?? '');

    // Only proceed with file uploads if it's an online program
    if ($isOnline == 1) {
        // Validate file uploads
        if (empty($_FILES['requirements'])) {
            throw new Exception("No requirement files uploaded");
        }

        // Get requirements for this assistance type
        $requirements = $conn->query("SELECT id, name FROM mswd_types_requirements WHERE mswd_types_id = $assistanceId");
        if ($requirements->num_rows === 0) {
            throw new Exception("No requirements found for this assistance type");
        }

        // Check all required files are present
        $requiredFiles = [];
        while ($req = $requirements->fetch_assoc()) {
            $reqId = $req['id'];
            if (!isset($_FILES['requirements']['name'][$reqId])) {
                throw new Exception("Missing required file: " . $req['name']);
            }
            if ($_FILES['requirements']['error'][$reqId] != UPLOAD_ERR_OK) {
                throw new Exception("Error uploading file for: " . $req['name']);
            }
            if ($_FILES['requirements']['size'][$reqId] > 5 * 1024 * 1024) {
                throw new Exception("File too large for: " . $req['name'] . " (max: 5MB)");
            }
            $requiredFiles[$reqId] = $_FILES['requirements']['tmp_name'][$reqId];
        }
    }

    // Process database insertion
    $stmt = $conn->prepare("INSERT INTO mswd_requests (
    user_id, barangay_id, first_name, middle_name, last_name, birthday,
    complete_address, assistance_id, assistance_name, remarks, status, created_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())");

    if (!$stmt) {
        throw new Exception("Database error: " . $conn->error);
    }
    
    $stmt->bind_param("iisssssisss", 
    $userId, $barangayId, $firstName, $middleName, $lastName, $birthday,
    $completeAddress, $assistanceId, $assistanceName, $remarks, $initialStatus
);

    if (!$stmt->execute()) {
        throw new Exception("Database save failed: " . $stmt->error);
    }

    $requestId = $conn->insert_id;

    // Only process file uploads if it's an online program
    if ($isOnline == 1) {
        // Process file uploads
        $uploadDir = '../../uploads/mayor/mswd/';
        if (!file_exists($uploadDir)) {
            mkdir($uploadDir, 0777, true);
        }

        $timestamp = date('YmdHis');
        $namePart = preg_replace('/[^a-zA-Z0-9]/', '', $firstName.$lastName);

        // Upload all requirement files
        $filePaths = [];
        $updateFields = [];
        $updateValues = [];
        $i = 1;
        
        foreach ($requiredFiles as $reqId => $tmpName) {
            $ext = pathinfo($_FILES['requirements']['name'][$reqId], PATHINFO_EXTENSION);
            $filename = sprintf("%d_%d_%d_%s_%s.%s",
                $requestId,
                $userId,
                $reqId,
                $namePart,
                $timestamp,
                $ext);
            
            $destination = $uploadDir . $filename;
            
            if (!move_uploaded_file($tmpName, $destination)) {
                throw new Exception("Failed to upload requirement file");
            }
            
            $filePaths[] = 'uploads/mayor/mswd/' . $filename;
            $updateFields[] = "requirement_path_$i";
            $updateValues[] = 'uploads/mayor/mswd/' . $filename;
            $i++;
            
            // We only have 8 requirement_path columns in the table
            if ($i > 8) break;
        }

        // Update with all file paths
        if (!empty($updateFields)) {
            $updateSql = "UPDATE mswd_requests SET ";
            $setParts = [];
            for ($j = 0; $j < count($updateFields); $j++) {
                $setParts[] = $updateFields[$j] . " = ?";
            }
            $updateSql .= implode(", ", $setParts) . " WHERE id = ?";
            
            $updateValues[] = $requestId;
            
            $updateStmt = $conn->prepare($updateSql);
            $types = str_repeat('s', count($updateFields)) . 'i';
            $updateStmt->bind_param($types, ...$updateValues);
            
            if (!$updateStmt->execute()) {
                throw new Exception("Failed to update file paths: " . $updateStmt->error);
            }
        }
    }

    $response['success'] = true;
    $response['message'] = 'Request successfully submitted!';
    if ($parentId == 13) {
        $response['message'] .= ' (Automatically approved by mayor\'s office)';
    }

} catch (Exception $e) {
    $response['message'] = $e->getMessage();
    
    // Clean up any uploaded files on error
    if (!empty($filePaths)) {
        foreach ($filePaths as $path) {
            @unlink('../../' . $path);
        }
    }
}

header('Content-Type: application/json');
echo json_encode($response);
?>


/mayor/pwd/index.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

$pageTitle = "MSWD - PWD Form";
include '../../includes/header.php';

// Hardcoded program data for PWD walk-in
$programs = [
    [
        'id' => 1,
        'name' => 'Financial Assistance',
        'sub_programs' => [
            [
                'id' => 101,
                'name' => 'Birthday Cash Give',
                'requirements' => [
                    'Registered PWD ID'
                ]
            ],
            [
                'id' => 102,
                'name' => 'In-School PWD',
                'requirements' => [
                    'PWD ID',
                    'Certificate of Enrollment',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 103,
                'name' => 'SPED',
                'requirements' => [
                    'PWD ID',
                    'Certificate of Enrollment',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 104,
                'name' => 'Alay ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 105,
                'name' => 'Malasakit ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Certificate of therapy',
                    'Parent ID'
                ]
            ],
            [
                'id' => 106,
                'name' => 'Kalinga ni MOM',
                'requirements' => [
                    'PWD ID',
                    'Student ID',
                    'Barangay Indigency'
                ]
            ],
            [
                'id' => 107,
                'name' => 'Burial',
                'requirements' => [
                    'Death certificate'
                ]
            ]
        ]
    ]
];

// Fetch barangays
$barangays = $conn->query("SELECT * FROM barangays ORDER BY name")->fetch_all(MYSQLI_ASSOC);
?>


/mayor/animal/adoption.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

$pageTitle = "Dog Adoption";
include '../../includes/header.php';

// Get dogs available for adoption or adopted
$dogs = $conn->query("
    SELECT d.id, d.breed, d.color, d.location_found, d.image_path, d.date_caught, d.status
    FROM dogs d
    WHERE d.status = 'for_adoption' OR d.status = 'adopted'
    ORDER BY FIELD(d.status, 'for_adoption', 'adopted'), d.created_at DESC
")->fetch_all(MYSQLI_ASSOC);

// Get user's adoptions and all pending/approved adoptions
$user_id = $_SESSION['user_id'];
$user_adoptions = [];
$pending_adoptions = [];

// Fetch user's adoptions
$user_adoptions_result = $conn->query("
    SELECT dog_id, status FROM dog_adoptions 
    WHERE user_id = $user_id 
    AND (status = 'pending' OR status = 'approved')
");

while ($row = $user_adoptions_result->fetch_assoc()) {
    $user_adoptions[$row['dog_id']] = $row['status'];
}

// Fetch all pending/approved adoptions (for admin view or to show status to all users)
$all_pending_result = $conn->query("
    SELECT dog_id, status FROM dog_adoptions 
    WHERE status = 'pending' OR status = 'approved'
");

while ($row = $all_pending_result->fetch_assoc()) {
    $pending_adoptions[$row['dog_id']] = $row['status'];
}

// Group dogs by status
$groupedDogs = [];
foreach ($dogs as $dog) {
    $status = $dog['status'];
    if (!isset($groupedDogs[$status])) {
        $groupedDogs[$status] = [];
    }
    $groupedDogs[$status][] = $dog;
}

// Human-readable status titles
$statusTitles = [
    'for_adoption' => 'For Adoption',
    'adopted' => 'Adopted'
];
?>


/mayor/animal/adoption_form.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_query = $conn->prepare("SELECT name, middle_name, last_name, birthday, address, barangay_id, phone FROM users WHERE id = ?");
$user_query->bind_param("i", $user_id);
$user_query->execute();
$user_result = $user_query->get_result();
$user_data = $user_result->fetch_assoc();

// Format birthday to YYYY-MM-DD for date input
$formatted_birthday = '';
if (!empty($user_data['birthday'])) {
    $formatted_birthday = date('Y-m-d', strtotime($user_data['birthday']));
}

// Get barangay name from barangay_id
$barangay_name = '';
if (!empty($user_data['barangay_id'])) {
    $barangay_query = $conn->prepare("SELECT name FROM barangays WHERE id = ?");
    $barangay_query->bind_param("i", $user_data['barangay_id']);
    $barangay_query->execute();
    $barangay_result = $barangay_query->get_result();
    if ($barangay_row = $barangay_result->fetch_assoc()) {
        $barangay_name = $barangay_row['name'];
    }
}

if (!isset($_GET['dog_id'])) {
    header('Location: adoption.php');
    exit;
}

$dogId = (int)$_GET['dog_id'];
$dog = $conn->query("
    SELECT d.id, d.breed, d.color, d.location_found, d.image_path, d.date_caught
    FROM dogs d
    WHERE d.id = $dogId AND d.status = 'for_adoption'
")->fetch_assoc();

if (!$dog) {
    header('Location: adoption.php');
    exit;
}

// Fetch barangays
$barangays = $conn->query("SELECT * FROM barangays ORDER by name")->fetch_all(MYSQLI_ASSOC);

$pageTitle = "Dog Adoption - Form";
include '../../includes/header.php';
?>


/mayor/animal/submit_adoption.php:

<?php
session_start();
require_once '../../includes/db.php';

header('Content-Type: application/json');

$response = ['success' => false, 'message' => ''];

try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        throw new Exception('Please login to submit an adoption request');
    }

    // Validate required fields
    $required = [
        'dog_id' => 'Dog ID',
        'first_name' => 'First name',
        'last_name' => 'Last name',
        'birthday' => 'Birthday',
        'barangay_id' => 'Barangay',
        'complete_address' => 'Complete address',
        'phone' => 'Contact number',
        'adoption_reason' => 'Reason for adoption'
    ];
    
    foreach ($required as $field => $fieldName) {
        if (empty($_POST[$field])) {
            throw new Exception("Please fill in: $fieldName");
        }
    }

    // Validate phone number format
    $phone = trim($_POST['phone']);
    if (!preg_match('/^\+63[0-9]{10}$/', $phone)) {
        throw new Exception("Invalid phone number format. Please use +63 followed by 10 digits.");
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['birthday'])) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Sanitize inputs
    $dogId = (int)$_POST['dog_id'];
    $userId = (int)$_SESSION['user_id'];
    $firstName = trim($_POST['first_name']);
    $middleName = isset($_POST['middle_name']) ? trim($_POST['middle_name']) : '';
    $lastName = trim($_POST['last_name']);
    $birthday = date('Y-m-d', strtotime($_POST['birthday']));
    $barangayId = (int)$_POST['barangay_id'];
    $address = trim($_POST['complete_address']);
    $adoption_reason = trim($_POST['adoption_reason']);
    $remarks = isset($_POST['remarks']) ? trim($_POST['remarks']) : '';

    // Check if dog exists
    $dogCheck = $conn->query("SELECT id FROM dogs WHERE id = $dogId");
    if ($dogCheck->num_rows === 0) {
        throw new Exception('Dog not found');
    }

    // Check if user already has a pending/approved adoption for this dog
    $existingRequest = $conn->query("
        SELECT id FROM dog_adoptions 
        WHERE dog_id = $dogId AND user_id = $userId
        AND status IN ('pending', 'approved')
    ");

    if ($existingRequest->num_rows > 0) {
        throw new Exception('You already have an existing adoption request for this dog');
    }

    // Insert the adoption request
    $stmt = $conn->prepare("
    INSERT INTO dog_adoptions (
        dog_id, user_id, first_name, middle_name, last_name, birthday,
        barangay_id, complete_address, phone, adoption_reason, remarks, status, created_at
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', NOW())
");
    
    if (!$stmt) {
        throw new Exception('Database error: ' . $conn->error);
    }
    
    $stmt->bind_param(
    'iissssissss',
    $dogId,
    $userId,
    $firstName,
    $middleName,
    $lastName,
    $birthday,
    $barangayId,
    $address,
    $phone,
    $adoption_reason,
    $remarks
);
    
    if (!$stmt->execute()) {
        throw new Exception('Failed to submit adoption request: ' . $stmt->error);
    }

    $response['success'] = true;
    $response['message'] = 'Adoption request submitted successfully! Our team will review your application.';

} catch (Exception $e) {
    $response['message'] = $e->getMessage();
    error_log('Adoption Error: ' . $e->getMessage());
}

echo json_encode($response);
?>


/mayor/animal/claiming.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

$pageTitle = "Lost Dog Claims";
include '../../includes/header.php';

// Get dogs available for claiming or claimed
$dogs = $conn->query("
    SELECT d.id, d.breed, d.color, d.location_found, d.image_path, d.date_caught, d.status
    FROM dogs d
    WHERE d.status = 'for_claiming' OR d.status = 'claimed'
    ORDER BY FIELD(d.status, 'for_claiming', 'claimed'), d.created_at DESC
")->fetch_all(MYSQLI_ASSOC);

// Get user's claims and all pending/approved claims
$user_id = $_SESSION['user_id'];
$user_claims = [];
$pending_claims = [];

// Fetch user's claims
$user_claims_result = $conn->query("
    SELECT dog_id, status FROM dog_claims 
    WHERE user_id = $user_id 
    AND (status = 'pending' OR status = 'approved')
");

while ($row = $user_claims_result->fetch_assoc()) {
    $user_claims[$row['dog_id']] = $row['status'];
}

// Fetch all pending/approved claims (for admin view or to show status to all users)
$all_pending_result = $conn->query("
    SELECT dog_id, status FROM dog_claims 
    WHERE status = 'pending' OR status = 'approved'
");

while ($row = $all_pending_result->fetch_assoc()) {
    $pending_claims[$row['dog_id']] = $row['status'];
}

// Group dogs by status
$groupedDogs = [];
foreach ($dogs as $dog) {
    $status = $dog['status'];
    if (!isset($groupedDogs[$status])) {
        $groupedDogs[$status] = [];
    }
    $groupedDogs[$status][] = $dog;
}

// Human-readable status titles
$statusTitles = [
    'for_claiming' => 'For Claiming',
    'claimed' => 'Claimed'
];
?>


/mayor/animal/claiming_form.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_query = $conn->prepare("SELECT name, middle_name, last_name, birthday, address, barangay_id, phone FROM users WHERE id = ?");
$user_query->bind_param("i", $user_id);
$user_query->execute();
$user_result = $user_query->get_result();
$user_data = $user_result->fetch_assoc();

// Format birthday to YYYY-MM-DD for date input
$formatted_birthday = '';
if (!empty($user_data['birthday'])) {
    $formatted_birthday = date('Y-m-d', strtotime($user_data['birthday']));
}

// Get barangay name from barangay_id
$barangay_name = '';
if (!empty($user_data['barangay_id'])) {
    $barangay_query = $conn->prepare("SELECT name FROM barangays WHERE id = ?");
    $barangay_query->bind_param("i", $user_data['barangay_id']);
    $barangay_query->execute();
    $barangay_result = $barangay_query->get_result();
    if ($barangay_row = $barangay_result->fetch_assoc()) {
        $barangay_name = $barangay_row['name'];
    }
}

if (!isset($_GET['dog_id'])) {
    header('Location: claiming.php');
    exit;
}

$dogId = (int)$_GET['dog_id'];
$dog = $conn->query("
    SELECT d.id, d.breed, d.color, d.location_found, d.image_path, d.date_caught
    FROM dogs d
    WHERE d.id = $dogId AND d.status = 'for_claiming'
")->fetch_assoc();

if (!$dog) {
    header('Location: claiming.php');
    exit;
}

// Fetch barangays
$barangays = $conn->query("SELECT * FROM barangays ORDER by name")->fetch_all(MYSQLI_ASSOC);

$pageTitle = "Lost Dog Claims - Form";
include '../../includes/header.php';
?>


/mayor/animal/submit_claim.php:

<?php
session_start();
require_once '../../includes/db.php';

header('Content-Type: application/json');

$response = ['success' => false, 'message' => ''];

try {
    // Check if user is logged in
    if (!isset($_SESSION['user_id'])) {
        throw new Exception('Please login to submit a claim request');
    }

    // Validate required fields
    $required = [
        'dog_id' => 'Dog ID',
        'first_name' => 'First name', 
        'last_name' => 'Last name',
        'birthday' => 'Birthday',
        'barangay_id' => 'Barangay',
        'complete_address' => 'Complete address',
        'phone' => 'Contact number'
    ];
    
    foreach ($required as $field => $fieldName) {
        if (empty($_POST[$field])) {
            throw new Exception("Please fill in: $fieldName");
        }
    }

    // Validate phone number format
    $phone = trim($_POST['phone']);
    if (!preg_match('/^\+63[0-9]{10}$/', $phone)) {
        throw new Exception("Invalid phone number format. Please use +63 followed by 10 digits.");
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['birthday'])) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Sanitize inputs
    $dogId = (int)$_POST['dog_id'];
    $userId = (int)$_SESSION['user_id'];
    $firstName = trim($_POST['first_name']);
    $middleName = isset($_POST['middle_name']) ? trim($_POST['middle_name']) : '';
    $lastName = trim($_POST['last_name']);
    $birthday = date('Y-m-d', strtotime($_POST['birthday']));
    $barangayId = (int)$_POST['barangay_id'];
    $address = trim($_POST['complete_address']);
    $dogName = isset($_POST['name_of_dog']) ? trim($_POST['name_of_dog']) : '';
    $dogAge = isset($_POST['age_of_dog']) ? (int)$_POST['age_of_dog'] : null;
    $remarks = isset($_POST['remarks']) ? trim($_POST['remarks']) : '';

    // Check if dog exists and is available for claiming
    $dogCheck = $conn->query("SELECT id, status FROM dogs WHERE id = $dogId");
    if ($dogCheck->num_rows === 0) {
        throw new Exception('Dog not found');
    }
    
    $dog = $dogCheck->fetch_assoc();
    if ($dog['status'] !== 'for_claiming') {
        throw new Exception('Dog is not available for claiming');
    }

    // Check if user already has a pending/approved claim for this dog
    $existingClaim = $conn->query("
        SELECT id FROM dog_claims 
        WHERE dog_id = $dogId AND user_id = $userId
        AND status IN ('pending', 'approved')
    ");
    
    if ($existingClaim->num_rows > 0) {
        throw new Exception('You already have an existing claim request for this dog');
    }

    // Insert the claim
    $stmt = $conn->prepare("
    INSERT INTO dog_claims (
        dog_id, user_id, first_name, middle_name, last_name, birthday,
        barangay_id, complete_address, phone, name_of_dog, age_of_dog, remarks, status, created_at
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', NOW())
");
    
    if (!$stmt) {
        throw new Exception('Database error: ' . $conn->error);
    }
    
    $stmt->bind_param(
    'iissssisssis',
    $dogId,
    $userId,
    $firstName,
    $middleName,
    $lastName,
    $birthday,
    $barangayId,
    $address,
    $phone,
    $dogName,
    $dogAge,
    $remarks
);
    
    if (!$stmt->execute()) {
        throw new Exception('Failed to submit claim: ' . $stmt->error);
    }

    $response['success'] = true;
    $response['message'] = 'Claim request submitted successfully! Our team will review your application.';

} catch (Exception $e) {
    $response['message'] = $e->getMessage();
}

echo json_encode($response);
?>


/mayor/animal/rabid.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_query = $conn->prepare("SELECT name, middle_name, last_name, birthday, address, barangay_id FROM users WHERE id = ?");
$user_query->bind_param("i", $user_id);
$user_query->execute();
$user_result = $user_query->get_result();
$user_data = $user_result->fetch_assoc();

// Format birthday to YYYY-MM-DD for date input
$formatted_birthday = '';
if (!empty($user_data['birthday'])) {
    $formatted_birthday = date('Y-m-d', strtotime($user_data['birthday']));
}

// Get barangay name from barangay_id
$barangay_name = '';
if (!empty($user_data['barangay_id'])) {
    $barangay_query = $conn->prepare("SELECT name FROM barangays WHERE id = ?");
    $barangay_query->bind_param("i", $user_data['barangay_id']);
    $barangay_query->execute();
    $barangay_result = $barangay_query->get_result();
    if ($barangay_row = $barangay_result->fetch_assoc()) {
        $barangay_name = $barangay_row['name'];
    }
}

// Fetch barangays
$barangays = $conn->query("SELECT * FROM barangays ORDER by name")->fetch_all(MYSQLI_ASSOC);

$pageTitle = "Rabid Report - Form";
include '../../includes/header.php';
?>


/mayor/animal/submit_rabid_report.php:

<?php
session_start();
require_once '../../includes/db.php';

header('Content-Type: application/json');

$response = ['success' => false, 'message' => ''];

try {
    // Verify required fields
    $required = [
        'first_name' => 'First name',
        'last_name' => 'Last name',
        'birthday' => 'Birthday',
        'barangay_id' => 'Barangay',
        'complete_address' => 'Complete address',
        'location' => 'Location',
        'date' => 'Date',
        'time' => 'Time',
        'description' => 'Description'
    ];
    
    foreach ($required as $field => $name) {
        if (empty($_POST[$field])) {
            throw new Exception("$name is required");
        }
    }

    // Verify file upload
    if (empty($_FILES['proof']['name'])) {
        throw new Exception('Photo evidence is required');
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['birthday'])) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Validate date format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['date'])) {
        throw new Exception('Invalid date format');
    }

    // Sanitize inputs
    $firstName = trim($_POST['first_name']);
    $middleName = isset($_POST['middle_name']) ? trim($_POST['middle_name']) : null;
    $lastName = trim($_POST['last_name']);
    $birthday = date('Y-m-d', strtotime($_POST['birthday']));
    $barangayId = (int)$_POST['barangay_id'];
    $address = trim($_POST['complete_address']);
    $location = trim($_POST['location']);
    $date = $_POST['date'];
    $time = $_POST['time'];
    $description = trim($_POST['description']);
    $userId = isset($_POST['user_id']) ? (int)$_POST['user_id'] : null;

    // Handle file upload
    $uploadDir = '../../uploads/mayor/animal/';
    if (!file_exists($uploadDir)) {
        mkdir($uploadDir, 0777, true);
    }

    $fileExt = pathinfo($_FILES['proof']['name'], PATHINFO_EXTENSION);
    $timestamp = date('YmdHis');
    $fileName = 'rabid_report_' . $timestamp . '.' . $fileExt;
    $filePath = $uploadDir . $fileName;

    if (!move_uploaded_file($_FILES['proof']['tmp_name'], $filePath)) {
        throw new Exception('Failed to upload photo');
    }

    // Store relative path for database
    $dbFilePath = 'uploads/mayor/animal/' . $fileName;

    // Insert into database
    $stmt = $conn->prepare("
        INSERT INTO rabid_reports (
            user_id, first_name, middle_name, last_name, birthday,
            barangay_id, complete_address, location, date, time, description, 
            proof_path, status, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', NOW())
    ");

    if (!$stmt) {
        @unlink($filePath); // Clean up file if prepare fails
        throw new Exception('Database error: ' . $conn->error);
    }

    $stmt->bind_param(
        'issssissssss',
        $userId,
        $firstName,
        $middleName,
        $lastName,
        $birthday,
        $barangayId,
        $address,
        $location,
        $date,
        $time,
        $description,
        $dbFilePath
    );

    if (!$stmt->execute()) {
        @unlink($filePath);
        throw new Exception('Failed to save report: ' . $stmt->error);
    }

    $response['success'] = true;
    $response['message'] = 'Rabid dog report submitted successfully!';

} catch (Exception $e) {
    $response['message'] = $e->getMessage();
    error_log('Rabid Report Error: ' . $e->getMessage());
}

echo json_encode($response);
?>


/vice_mayor/assistance/index.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../includes/auth/login.php');
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$user_query = $conn->prepare("SELECT name, middle_name, last_name, birthday, address, barangay_id FROM users WHERE id = ?");
$user_query->bind_param("i", $user_id);
$user_query->execute();
$user_result = $user_query->get_result();
$user_data = $user_result->fetch_assoc();

// Format birthday to YYYY-MM-DD for date input
$formatted_birthday = '';
if (!empty($user_data['birthday'])) {
    $formatted_birthday = date('Y-m-d', strtotime($user_data['birthday']));
}

// Get barangay name from barangay_id
$barangay_name = '';
if (!empty($user_data['barangay_id'])) {
    $barangay_query = $conn->prepare("SELECT name FROM barangays WHERE id = ?");
    $barangay_query->bind_param("i", $user_data['barangay_id']);
    $barangay_query->execute();
    $barangay_result = $barangay_query->get_result();
    if ($barangay_row = $barangay_result->fetch_assoc()) {
        $barangay_name = $barangay_row['name'];
    }
}

$pageTitle = "Assistance - Form";
include '../../includes/header.php';

// Get main assistance types (parent programs)
$assistance_types = $conn->query("SELECT * FROM assistance_types WHERE parent_id IS NULL ORDER BY 
    CASE 
        WHEN name = 'Medical Assistance' THEN 1
        WHEN name = 'Nebulizer Request' THEN 2
        WHEN name = 'Glucometer Request' THEN 3
        WHEN name = 'Wheelchair Request' THEN 4
        WHEN name = 'Laboratory Assistance' THEN 5
        WHEN name = 'Burial Assistance' THEN 6
        WHEN name = 'Educational Assistance' THEN 7
        ELSE 8
    END")->fetch_all(MYSQLI_ASSOC);

// Get sub-programs
$sub_programs = $conn->query("SELECT * FROM assistance_types WHERE parent_id IS NOT NULL")->fetch_all(MYSQLI_ASSOC);

$barangays = $conn->query("SELECT * FROM barangays ORDER BY name")->fetch_all(MYSQLI_ASSOC);

// Get family relations
$family_relations = $conn->query("SELECT * FROM family_relations ORDER BY id")->fetch_all(MYSQLI_ASSOC);
?>


/vice_mayor/assistance/check_existing_request.php:

<?php
session_start();
require_once '../../includes/db.php';

header('Content-Type: application/json');

$response = [
    'exists' => false,
    'message' => '',
    'error' => null
];

try {
    // Validate required fields
    $requiredFields = ['first_name', 'last_name', 'barangay_id', 'assistance_id', 'birthday'];
    foreach ($requiredFields as $field) {
        if (empty($_POST[$field])) {
            throw new Exception("Missing required field: $field");
        }
    }

    $firstName = trim($_POST['first_name']);
    $middleName = trim($_POST['middle_name'] ?? '');
    $lastName = trim($_POST['last_name']);
    $barangayId = (int)$_POST['barangay_id'];
    $assistanceId = (int)$_POST['assistance_id'];
    $birthday = trim($_POST['birthday']);

    // Debug: Log the received data
    error_log("Check existing request - First: $firstName, Last: $lastName, Birthday: $birthday, Barangay: $barangayId");

    // Validate birthday format - accept both YYYY-MM-DD and other formats
    $birthdayDate = DateTime::createFromFormat('Y-m-d', $birthday);
    if (!$birthdayDate) {
        // Try other common formats if YYYY-MM-DD fails
        $birthdayDate = DateTime::createFromFormat('m/d/Y', $birthday);
        if (!$birthdayDate) {
            $birthdayDate = DateTime::createFromFormat('d/m/Y', $birthday);
        }
    }

    if (!$birthdayDate) {
        throw new Exception("Invalid birthday format: $birthday");
    }

    $formattedBirthday = $birthdayDate->format('Y-m-d');

    // Check for existing requests for this person
    $query = "
        SELECT status, updated_at, created_at
        FROM assistance_requests 
        WHERE first_name = ? 
        AND last_name = ? 
        AND barangay_id = ?
        AND birthday = ?
        AND status NOT IN ('declined', 'cancelled')
        ORDER BY created_at DESC
        LIMIT 1
    ";

    $params = [$firstName, $lastName, $barangayId, $formattedBirthday];
    $types = "ssis";

    // Include middle name if provided
    if (!empty($middleName)) {
        $query = str_replace(
            "WHERE first_name = ?", 
            "WHERE first_name = ? AND middle_name = ?", 
            $query
        );
        array_splice($params, 1, 0, $middleName);
        $types = "sssis";
    }

    $stmt = $conn->prepare($query);
    if (!$stmt) {
        throw new Exception("Database prepare error: " . $conn->error);
    }

    $stmt->bind_param($types, ...$params);
    if (!$stmt->execute()) {
        throw new Exception("Database execute error: " . $stmt->error);
    }

    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        $status = $row['status'];
        
        if ($status === 'pending' || $status === 'approved') {
            $response['exists'] = true;
            $response['message'] = "You already have a $status request. Please wait until it's processed.";
        } elseif ($status === 'completed') {
            // Check if 30 days have passed since completion
            $completedDate = new DateTime($row['updated_at'] ?? $row['created_at']);
            $currentDate = new DateTime();
            $interval = $currentDate->diff($completedDate);
            
            if ($interval->days < 30) {
                $daysLeft = 30 - $interval->days;
                $response['exists'] = true;
                $response['message'] = "You can submit again after $daysLeft days from your last completed request.";
            }
        }
    }

} catch (Exception $e) {
    error_log("Error in check_existing_request.php: " . $e->getMessage());
    $response['error'] = "System error: " . $e->getMessage();
    http_response_code(500);
}

echo json_encode($response);
?>


/vice_mayor/assistance/submit_request.php:

<?php
session_start();
require_once '../../includes/db.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: ../../login.php');
    exit;
}

$response = ['success' => false, 'message' => ''];

try {
    // Validate required fields
    $required = [
        'first_name' => 'First name',
        'last_name' => 'Last name', 
        'birthday' => 'Birthday',
        'barangay_id' => 'Barangay',
        'complete_address' => 'Complete address',
        'user_id' => 'User ID',
        'family_relation_id' => 'Family relation'
    ];
    
    foreach ($required as $field => $fieldName) {
        if (empty($_POST[$field])) {
            throw new Exception("Please fill in: $fieldName");
        }
    }

    // Validate family relation
    $relationId = (int)$_POST['family_relation_id'];
    $relationCheck = $conn->query("SELECT id FROM family_relations WHERE id = $relationId");
    if ($relationCheck->num_rows === 0) {
        throw new Exception("Invalid family relation selected");
    }

    // Determine assistance_id and assistance_name
    $assistanceId = null;
    $assistanceName = null;
    
    if (isset($_POST['sub_program_id']) && $_POST['sub_program_id'] !== 'other') {
        $assistanceId = (int)$_POST['sub_program_id'];
    } elseif (isset($_POST['assistance_id'])) {
        $assistanceId = (int)$_POST['assistance_id'];
        
        if (isset($_POST['assistance_name']) && !empty($_POST['assistance_name'])) {
            $assistanceName = trim($_POST['assistance_name']);
        }
    } else {
        throw new Exception("Please fill in: Assistance type");
    }

    // Validate birthday format
    if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $_POST['birthday'])) {
        throw new Exception("Invalid birthday format. Please use YYYY-MM-DD");
    }

    // Prepare variables for database
    $birthday = date('Y-m-d', strtotime($_POST['birthday']));
    if ($birthday === false) {
        throw new Exception("Invalid birthday date");
    }

    $currentDate = new DateTime();
    $birthdayDate = new DateTime($birthday);
    $minDate = new DateTime('1900-01-01');

    if ($birthdayDate > $currentDate) {
        throw new Exception("Birthday cannot be in the future");
    }

    if ($birthdayDate < $minDate) {
        throw new Exception("Birthday is too far in the past");
    }

    // Prepare variables for database
    $firstName = trim($_POST['first_name']);
    $middleName = trim($_POST['middle_name'] ?? '');
    $lastName = trim($_POST['last_name']);
    $birthday = $_POST['birthday'];
    $barangayId = (int)$_POST['barangay_id'];
    $precintNumber = isset($_POST['precint_number']) && trim($_POST['precint_number']) !== '' ? 
                    strtoupper(trim($_POST['precint_number'])) : null;
    $completeAddress = trim($_POST['complete_address']);
    $userId = (int)$_POST['user_id'];
    $relationId = (int)$_POST['family_relation_id'];
    $remarks = trim($_POST['remarks'] ?? '');

    // Validate file uploads - common required files
    $requiredFiles = [
        'specific_request' => ['number' => 1, 'name' => 'Specific request document'],
        'indigency_cert' => ['number' => 2, 'name' => 'Indigency certificate'],
        'id_copy' => ['number' => 3, 'name' => 'ID copy'],
        'request_letter' => ['number' => 4, 'name' => 'Request letter']
    ];

    // Add second ID copy requirement only if relation is not self (relation_id != 1)
    if ($relationId != 1) {
        $requiredFiles['id_copy_2'] = ['number' => 5, 'name' => 'Requester ID copy'];
    }
    
    foreach ($requiredFiles as $file => $fileInfo) {
        if (!isset($_FILES[$file]) || $_FILES[$file]['error'] != UPLOAD_ERR_OK) {
            throw new Exception("Please upload: {$fileInfo['name']}");
        }
        
        // Check if file is actually uploaded
        if (!is_uploaded_file($_FILES[$file]['tmp_name'])) {
            throw new Exception("Invalid file upload for {$fileInfo['name']}");
        }
        
        if ($_FILES[$file]['size'] > 20 * 1024 * 1024) {
            throw new Exception("File too large for {$fileInfo['name']} (max: 20MB)");
        }
        
        // Check file type
        $allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
        $finfo = finfo_open(FILEINFO_MIME_TYPE);
        $mimeType = finfo_file($finfo, $_FILES[$file]['tmp_name']);
        finfo_close($finfo);
        
        if (!in_array($mimeType, $allowedTypes)) {
            throw new Exception("Invalid file type for {$fileInfo['name']}. Only images and PDFs are allowed.");
        }
    }

    // Process file uploads
    $uploadDir = '../../uploads/vice_mayor/assistance/';
    if (!file_exists($uploadDir)) {
        mkdir($uploadDir, 0777, true);
    }

    // First insert the request to get the ID
    $stmt = $conn->prepare("INSERT INTO assistance_requests (
        user_id, assistance_id, assistance_name, remarks, first_name, middle_name, last_name, birthday,
        barangay_id, precint_number, complete_address, relation_id, status, created_at
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', NOW())");

    if (!$stmt) {
        throw new Exception("Database error: " . $conn->error);
    }

    $stmt->bind_param("iissssssissi", 
        $userId, $assistanceId, $assistanceName, $remarks, $firstName, $middleName, $lastName, $birthday,
        $barangayId, $precintNumber, $completeAddress, $relationId
    );
    
    if (!$stmt->execute()) {
        throw new Exception("Database save failed: " . $stmt->error);
    }

    $requestId = $conn->insert_id;
    $timestamp = date('YmdHis');
    $namePart = preg_replace('/[^a-zA-Z0-9]/', '', $firstName.$lastName);

    // Upload all files with exact requested format
    $filePaths = [];
    foreach ($requiredFiles as $file => $fileInfo) {
        $ext = pathinfo($_FILES[$file]['name'], PATHINFO_EXTENSION);
        $filename = sprintf("%d_%d_%d_%s_%s.%s",
            $requestId,
            $userId,
            $fileInfo['number'],
            $namePart,
            $timestamp,
            $ext);
        
        $destination = $uploadDir . $filename;
        
        if (!move_uploaded_file($_FILES[$file]['tmp_name'], $destination)) {
            throw new Exception("Failed to upload {$fileInfo['name']}");
        }
        
        $filePaths[$file.'_path'] = 'uploads/vice_mayor/assistance/' . $filename;
    }

    // Update with all file paths
    $updateSql = "UPDATE assistance_requests SET ";
    $params = [];
    $types = '';
    
    if ($relationId != 1) {
        $updateSql .= "specific_request_path=?, indigency_cert_path=?, id_copy_path=?, id_copy_path_2=?, request_letter_path=? ";
        $params = [
            $filePaths['specific_request_path'],
            $filePaths['indigency_cert_path'],
            $filePaths['id_copy_path'],
            $filePaths['id_copy_2_path'],
            $filePaths['request_letter_path']
        ];
        $types = 'sssss';
    } else {
        $updateSql .= "specific_request_path=?, indigency_cert_path=?, id_copy_path=?, request_letter_path=? ";
        $params = [
            $filePaths['specific_request_path'],
            $filePaths['indigency_cert_path'],
            $filePaths['id_copy_path'],
            $filePaths['request_letter_path']
        ];
        $types = 'ssss';
    }
    
    $updateSql .= "WHERE id=?";
    $params[] = $requestId;
    $types .= 'i';
    
    $updateStmt = $conn->prepare($updateSql);
    $updateStmt->bind_param($types, ...$params);
    
    if (!$updateStmt->execute()) {
        throw new Exception("Failed to update file paths: " . $updateStmt->error);
    }

    $response['success'] = true;
    $response['message'] = 'Request successfully submitted!';

} catch (Exception $e) {
    $response['message'] = $e->getMessage();
    
    // Clean up any uploaded files on error
    if (!empty($filePaths)) {
        foreach ($filePaths as $path) {
            @unlink('../../' . $path);
        }
    }
}

header('Content-Type: application/json');
echo json_encode($response);
?>


------------------------------------------------ MAYOR'S OFFICE SUPERADMIN

mayor/superadmin/management.php:

<?php
session_start();
include '../../includes/db.php';

// Check if superadmin is logged in
if (!isset($_SESSION['mayor_superadmin_id'])) {
    header("Location: ../../includes/auth/login.php");
    exit();
}

// Get superadmin info
$mayor_superadmin_id = $_SESSION['mayor_superadmin_id'];
$superadmin_query = $conn->query("SELECT name, department_id FROM admins WHERE id = $mayor_superadmin_id");
$superadmin_data = $superadmin_query->fetch_assoc();
$superadmin_name = $superadmin_data['name'] ?? 'Mayor SuperAdmin';
$superadmin_dept_id = $superadmin_data['department_id'];

// Get all departments for filter (IDs 2-6 only)
$departments_query = $conn->query("SELECT id, name FROM departments WHERE id >= 2 AND id <= 6 ORDER BY name");
$departments_filter = [];
while ($row = $departments_query->fetch_assoc()) {
    $departments_filter[$row['id']] = $row['name'];
}

// Get all barangays for filter (IDs 17-35 only)
$barangays_query = $conn->query("SELECT id, name FROM departments WHERE id >= 17 AND id <= 35 ORDER BY name");
$barangays_filter = [];
while ($row = $barangays_query->fetch_assoc()) {
    $barangays_filter[$row['id']] = $row['name'];
}

// Filter handling
$where = [];
$params = [];
$types = '';

if (isset($_GET['department']) && !empty($_GET['department'])) {
    $where[] = "a.department_id = ?";
    $params[] = $_GET['department'];
    $types .= 'i';
}

if (isset($_GET['search']) && !empty($_GET['search'])) {
    $search = '%' . $_GET['search'] . '%';
    $where[] = "(a.name LIKE ? OR a.phone LIKE ?)";
    $params[] = $search;
    $params[] = $search;
    $types .= 'ss';
}

if (isset($_GET['date']) && !empty($_GET['date'])) {
    $where[] = "DATE(a.created_at) = ?";
    $params[] = $_GET['date'];
    $types .= 's';
}

$whereClause = $where ? "WHERE " . implode(" AND ", $where) : "";

$pageTitle = 'Admin Management';
include '../../includes/header.php';

function formatPhoneNumber($phone) {
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Get all admin accounts with their department info (excluding superadmins with IDs 1 and 2 AND only departments with parent_id=1)
$admins_query = $conn->prepare("
    SELECT a.id, a.name, a.phone, a.department_id, d.name as department_name, a.created_at 
    FROM admins a 
    JOIN departments d ON a.department_id = d.id
    $whereClause AND a.id NOT IN (1, 2) AND d.parent_id = 1
    ORDER BY a.created_at DESC
");

if (!empty($params)) {
    $admins_query->bind_param($types, ...$params);
}

$admins_query->execute();
$admins = $admins_query->get_result();

// Get all departments for the edit form (IDs 2-6 and 17-35 only, excluding ID 1)
$departments = $conn->query("SELECT id, name FROM departments WHERE id IN (2,3,4,5,6,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35) ORDER BY name");
$departmentsArray = $departments->fetch_all(MYSQLI_ASSOC);
?>


/mayor/superadmin/save_admin.php:

<?php
session_start();
include '../../includes/db.php';

// Check if superadmin is logged in
if (!isset($_SESSION['mayor_superadmin_id'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'Unauthorized access']);
    exit();
}

// Initialize response array
$response = ['success' => false, 'message' => ''];

try {
    // Validate required fields
    if (empty($_POST['name']) || empty($_POST['phone']) || empty($_POST['department_id'])) {
        throw new Exception('All fields are required except password when editing');
    }

    // Sanitize inputs
    $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    $name = trim($_POST['name']);
    $phone = trim($_POST['phone']);
    $department_id = intval($_POST['department_id']);
    $password = isset($_POST['password']) ? trim($_POST['password']) : '';

    // Validate phone format (should be +639XXXXXXXXX)
    if (!preg_match('/^\+63\d{10}$/', $phone)) {
        throw new Exception('Phone number must be in the format +639XXXXXXXXX (12 digits total)');
    }

    // Check if phone already exists (for new admins or when editing)
    $checkPhone = $conn->prepare("SELECT id FROM admins WHERE phone = ? AND id != ?");
    $checkPhone->bind_param("si", $phone, $id);
    $checkPhone->execute();
    $checkPhone->store_result();

    if ($checkPhone->num_rows > 0) {
        throw new Exception('Phone number already exists for another admin');
    }

    if ($id > 0) {
        // Update existing admin
        if (!empty($password)) {
            // Update with password change
            $hashed_password = password_hash($password, PASSWORD_DEFAULT);
            $stmt = $conn->prepare("UPDATE admins SET name = ?, phone = ?, department_id = ?, password = ? WHERE id = ?");
            $stmt->bind_param("ssisi", $name, $phone, $department_id, $hashed_password, $id);
        } else {
            // Update without password change
            $stmt = $conn->prepare("UPDATE admins SET name = ?, phone = ?, department_id = ? WHERE id = ?");
            $stmt->bind_param("ssii", $name, $phone, $department_id, $id);
        }
    } else {
        // Create new admin (password is required)
        if (empty($password)) {
            throw new Exception('Password is required for new admin');
        }
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        $stmt = $conn->prepare("INSERT INTO admins (name, phone, department_id, password) VALUES (?, ?, ?, ?)");
        $stmt->bind_param("ssis", $name, $phone, $department_id, $hashed_password);
    }

    if ($stmt->execute()) {
        $response['success'] = true;
        $response['message'] = $id > 0 ? 'Admin updated successfully' : 'Admin created successfully';
    } else {
        throw new Exception('Database error: ' . $stmt->error);
    }

    $stmt->close();
} catch (Exception $e) {
    $response['message'] = $e->getMessage();
}

header('Content-Type: application/json');
echo json_encode($response);
?>


------------------------------------------------ MSWD AND MAYOR'S OFFICE ADMIN PANEL

/mayor/mswd/mayor_admin/pending.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['mayor_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$mayor_admin_id = $_SESSION['mayor_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $mayor_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'Pending';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    // Convert +639 to 09
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all pending requests
$stmt = $conn->prepare("
    SELECT mr.id, mt.name as program, mt.parent_id,
           mr.last_name, mr.first_name, mr.middle_name, mr.birthday,
           u.phone, mr.created_at, b.name as barangay
    FROM mswd_requests mr
    JOIN mswd_types mt ON mr.assistance_id = mt.id
    JOIN users u ON mr.user_id = u.id
    LEFT JOIN barangays b ON mr.barangay_id = b.id
    WHERE mr.status = 'pending'
    ORDER BY mr.id ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Get only online programs for filter dropdown
$programsQuery = "SELECT id, name, parent_id FROM mswd_types WHERE is_online = 1 ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name";
$programs = $conn->query($programsQuery);

// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

// Calculate next Monday's date
$nextMonday = new DateTime();
$nextMonday->modify('next monday');
$nextMondayStr = $nextMonday->format('Y-m-d');

// Prepare the queue date for JavaScript
$queueDateData = json_encode([
    'success' => true,
    'queue_date' => $nextMondayStr
]);
?>


/mayor/mswd/mayor_admin/pending.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['mayor_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$mayor_admin_id = $_SESSION['mayor_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $mayor_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'Pending';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    // Convert +639 to 09
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all pending requests
$stmt = $conn->prepare("
    SELECT mr.id, mt.name as program, mt.parent_id,
           mr.last_name, mr.first_name, mr.middle_name, mr.birthday,
           u.phone, mr.created_at, b.name as barangay
    FROM mswd_requests mr
    JOIN mswd_types mt ON mr.assistance_id = mt.id
    JOIN users u ON mr.user_id = u.id
    LEFT JOIN barangays b ON mr.barangay_id = b.id
    WHERE mr.status = 'pending'
    ORDER BY mr.id ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Get only online programs for filter dropdown
$programsQuery = "SELECT id, name, parent_id FROM mswd_types WHERE is_online = 1 ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name";
$programs = $conn->query($programsQuery);

// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

// Calculate next Monday's date
$nextMonday = new DateTime();
$nextMonday->modify('next monday');
$nextMondayStr = $nextMonday->format('Y-m-d');

// Prepare the queue date for JavaScript
$queueDateData = json_encode([
    'success' => true,
    'queue_date' => $nextMondayStr
]);
?>


/mayor/mswd/mayor_admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require_once '../../../includes/send_sms.php';
// Include the file deletion function
require_once '../../../includes/delete_request_files.php';

if (!isset($_SESSION['mayor_admin_id'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'Unauthorized']);
    exit();
}

$mayor_admin_id = $_SESSION['mayor_admin_id'];
$request_id = $_POST['id'] ?? null;
$action = $_POST['action'] ?? '';

header('Content-Type: application/json');

if (!$request_id || !$action) {
    echo json_encode(['success' => false, 'message' => 'Invalid request']);
    exit();
}

try {
    // Get admin name for messages
    $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
    $admin_stmt->bind_param("i", $mayor_admin_id);
    $admin_stmt->execute();
    $admin_result = $admin_stmt->get_result();
    $admin = $admin_result->fetch_assoc();
    $admin_name = $admin['name'];

    // Get request details
    $stmt = $conn->prepare("
        SELECT mr.*, u.phone, mt.name as program_name 
        FROM mswd_requests mr
        JOIN mswd_types mt ON mr.assistance_id = mt.id
        JOIN users u ON mr.user_id = u.id
        WHERE mr.id = ?
    ");
    $stmt->bind_param("i", $request_id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows === 0) {
        throw new Exception('Request not found');
    }

    $request = $result->fetch_assoc();
    $phone = $request['phone'];
    $program_name = $request['program_name'];

    if ($action === 'approve') {
        // Update request status to mayor_approved
        $stmt = $conn->prepare("
            UPDATE mswd_requests 
            SET status = 'mayor_approved',
                approved2by_admin_id = ?,
                updated_at = NOW()
            WHERE id = ?
        ");
        $stmt->bind_param('ii', $mayor_admin_id, $request_id);
        
        if ($stmt->execute()) {
            echo json_encode(['success' => true]);
        } else {
            throw new Exception('Failed to approve request');
        }
    } 
    elseif ($action === 'decline') {
        $reason = $_POST['reason'] ?? '';
        
        if (empty($reason)) {
            throw new Exception('Reason is required');
        }
        
        // Prepare SMS message for decline
        $message = "Municipal MSWD:\n";
        $message .= "Request #$request_id ($program_name) - DECLINED\n";
        $message .= "Reason: $reason\n";
        $message .= "Declined by: $admin_name\n";
        $message .= "You may apply again if you still need assistance.";
        
        // Update request status to declined
        $stmt = $conn->prepare("
            UPDATE mswd_requests 
            SET status = 'declined',
                reason = ?,
                declinedby_admin_id = ?,
                updated_at = NOW()
            WHERE id = ?
        ");
        $stmt->bind_param('sii', $reason, $mayor_admin_id, $request_id);
        
        if ($stmt->execute()) {
            // Delete the uploaded files for this request
            $filesDeleted = deleteRequestFiles('mswd_requests', $request_id, $conn);
            
            // Clear file references from database
            $referencesCleared = clearFileReferences('mswd_requests', $request_id, $conn);
            
            // Send SMS notification for decline
            $sms_sent = sendSMS($message, [$phone]);
            
            if (!$sms_sent) {
                // Even if SMS fails, we still consider the decline successful
                error_log("Request declined but failed to send SMS notification for request ID: $request_id");
            }
            
            $response = ['success' => true];
            
            // Add file deletion status to response for debugging
            if (!$filesDeleted || !$referencesCleared) {
                $response['warning'] = 'Request declined but some files may not have been deleted properly';
            }
            
            echo json_encode($response);
        } else {
            throw new Exception('Failed to decline request');
        }
    } 
    else {
        throw new Exception('Invalid action');
    }
} catch (Exception $e) {
    echo json_encode(['success' => false, 'message' => $e->getMessage()]);
}


/mayor/mswd/admin/mayor_approved.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['mswd_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$mswd_admin_id = $_SESSION['mswd_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $mswd_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'Mayor Approved';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all mayor approved requests with contact number logic
$stmt = $conn->prepare("
    SELECT ar.id, at.name as program, at.parent_id, ar.assistance_id as equipment_type_id,
           ar.last_name, ar.first_name, ar.middle_name, ar.birthday,
           CASE 
               WHEN ar.is_walkin = 1 THEN ar.contact_no 
               ELSE u.phone 
           END as phone,
           ar.created_at, b.name as barangay, ar.queue_date, ar.is_walkin
    FROM mswd_requests ar
    JOIN mswd_types at ON ar.assistance_id = at.id
    LEFT JOIN users u ON ar.user_id = u.id
    LEFT JOIN barangays b ON ar.barangay_id = b.id
    WHERE ar.status = 'mayor_approved'
    ORDER BY ar.id ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Get Sulong Dulong availability
$sulongDulongCount = $conn->query("SELECT COUNT(*) as total FROM sulong_dulong_beneficiaries WHERE status = 'Active'")->fetch_assoc()['total'];
$maxBeneficiaries = 800;
$sulongDulongLeft = $maxBeneficiaries - $sulongDulongCount;

// Get only online programs for filter dropdown
$programsQuery = "SELECT id, name, parent_id FROM mswd_types WHERE is_online = 1 ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name";
$programs = $conn->query($programsQuery);

// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

// Calculate tomorrow's date
$tomorrow = new DateTime();
$tomorrow->modify('+1 day');
$tomorrowStr = $tomorrow->format('Y-m-d');

// Daily approval limit
$dailyLimit = 300;

// Prepare the queue date for JavaScript
$queueDateData = json_encode([
    'success' => true,
    'queue_date' => $tomorrowStr
]);

// Get equipment availability for MSWD types 9, 10, 11, 12
$equipmentQuery = $conn->query("
    SELECT ei.equipment_type_id, mt.name, ei.available_quantity 
    FROM equipment_inventory ei
    JOIN mswd_types mt ON ei.equipment_type_id = mt.id
    WHERE ei.equipment_type_id IN (9, 10, 11, 12)
");
$equipmentAvailability = [];
while ($eq = $equipmentQuery->fetch_assoc()) {
    $equipmentAvailability[$eq['equipment_type_id']] = $eq;
}
?>


mayor/mswd/admin/mswd_approved.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['mswd_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$mswd_admin_id = $_SESSION['mswd_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $mswd_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'MSWD Approved';
include '../../../includes/header.php';

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all mswd_approved requests with queue information, grouped by queue_date
$stmt = $conn->prepare("
    SELECT mr.id, mt.name as program, mt.parent_id,
           mr.last_name, mr.first_name, mr.middle_name, mr.birthday,
           u.phone, mr.updated_at, mr.queue_date, mr.queue_no,
           mr.status, mr.approvedby_admin_id, mr.approved2by_admin_id, mr.completedby_admin_id, mr.released_date,
           mr.recipient, mr.relation_to_recipient, b.name as barangay,
           mr.reschedule_count, mr.amount, mr.is_walkin,
           a.name as admin_name, mr.user_id
    FROM mswd_requests mr
    JOIN mswd_types mt ON mr.assistance_id = mt.id
    LEFT JOIN users u ON mr.user_id = u.id
    LEFT JOIN barangays b ON mr.barangay_id = b.id
    LEFT JOIN admins a ON mr.walkin_admin_id = a.id
    WHERE mr.status = 'mswd_approved'
    ORDER BY mr.is_walkin DESC, mr.queue_date ASC, CAST(mr.queue_no AS UNSIGNED) ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Separate walk-ins and regular requests
$walkInRequests = [];
$regularRequests = [];

while ($row = $result->fetch_assoc()) {
    if ($row['is_walkin'] == 1) {
        $walkInRequests[] = $row;
    } else {
        $queueDate = $row['queue_date'];
        if (!isset($regularRequests[$queueDate])) {
            $regularRequests[$queueDate] = [];
        }
        $regularRequests[$queueDate][] = $row;
    }
}

// Get only online programs for filter dropdown
$programs = $conn->query("
    SELECT id, name, parent_id 
    FROM mswd_types 
    WHERE is_online = 1
    ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name
");
// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

function formatPhoneNumber($phone) {
    if (empty($phone)) return 'Walk-in';
    // Convert +639 to 09
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Daily approval limit
$dailyLimit = 300;

// Calculate tomorrow's date for default reschedule
$tomorrow = new DateTime();
$tomorrow->modify('+1 day');
$tomorrowStr = $tomorrow->format('Y-m-d');

// Prepare the queue date for JavaScript
$queueDateData = json_encode([
    'success' => true,
    'queue_date' => $tomorrowStr
]);
?>


/mayor/mswd/admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require '../../../includes/send_sms.php';
// Include the file deletion function
require_once '../../../includes/delete_request_files.php';

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['mswd_admin_id'])) {
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit;
}

$admin_id = $_SESSION['mswd_admin_id'];

header('Content-Type: application/json');

// Daily approval limit
$dailyLimit = 250;

// Helper function for ordinal numbers
function ordinal($number) {
    $suffixes = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
    if (($number % 100) >= 11 && ($number % 100) <= 13) {
        return $number . 'th';
    }
    return $number . $suffixes[$number % 10];
}

// Helper function to format phone numbers
function formatPhoneNumber($phone) {
    $phone = preg_replace('/[^0-9]/', '', $phone);
    if (strpos($phone, '0') === 0) {
        return '+63' . substr($phone, 1);
    }
    if (strpos($phone, '63') === 0) {
        return '+' . $phone;
    }
    if (strpos($phone, '+') === 0) {
        return $phone;
    }
    return '+63' . $phone;
}

// Helper function to check daily limit
function checkDailyLimit($conn, $date) {
    global $dailyLimit;
    
    $stmt = $conn->prepare("
        SELECT COUNT(*) as count 
        FROM mswd_requests 
        WHERE DATE(queue_date) = DATE(?) 
        AND status = 'mswd_approved'
    ");
    $stmt->bind_param("s", $date);
    $stmt->execute();
    $result = $stmt->get_result();
    $count = $result->fetch_assoc()['count'];
    
    return [
        'count' => $count,
        'remaining' => $dailyLimit - $count,
        'limit_reached' => $count >= $dailyLimit
    ];
}

// Helper function to get next queue number for a date
function getNextQueueNumber($conn, $date) {
    $stmt = $conn->prepare("
        SELECT COALESCE(MAX(queue_no), 0) + 1 as next_queue 
        FROM mswd_requests 
        WHERE queue_date = ? AND status = 'mswd_approved'
    ");
    $stmt->bind_param("s", $date);
    $stmt->execute();
    $result = $stmt->get_result();
    $data = $result->fetch_assoc();
    return $data['next_queue'];
}

// Helper function to check equipment availability
function checkEquipmentAvailability($conn, $equipment_type_id) {
    $stmt = $conn->prepare("
        SELECT available_quantity 
        FROM equipment_inventory 
        WHERE equipment_type_id = ?
    ");
    $stmt->bind_param("i", $equipment_type_id);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows === 0) {
        return 0;
    }
    
    $data = $result->fetch_assoc();
    return $data['available_quantity'];
}

// Helper function to deduct equipment quantity
function deductEquipment($conn, $equipment_type_id) {
    $stmt = $conn->prepare("
        UPDATE equipment_inventory 
        SET available_quantity = available_quantity - 1 
        WHERE equipment_type_id = ? AND available_quantity > 0
    ");
    $stmt->bind_param("i", $equipment_type_id);
    
    if ($stmt->execute()) {
        return $stmt->affected_rows > 0;
    }
    return false;
}

// Helper function to restore equipment quantity
function restoreEquipment($conn, $equipment_type_id) {
    $stmt = $conn->prepare("
        UPDATE equipment_inventory 
        SET available_quantity = available_quantity + 1 
        WHERE equipment_type_id = ?
    ");
    $stmt->bind_param("i", $equipment_type_id);
    
    if ($stmt->execute()) {
        return $stmt->affected_rows > 0;
    }
    return false;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (!isset($_POST['action'])) {
            throw new Exception('No action specified');
        }

        $action = $_POST['action'];

        // Handle inquiry answer action
        if ($action === 'answer_inquiry' && isset($_POST['inquiry_id']) && isset($_POST['answer'])) {
            $inquiry_id = intval($_POST['inquiry_id']);
            $answer = trim($_POST['answer']);
            
            if (empty($answer)) {
                header('HTTP/1.1 400 Bad Request');
                echo json_encode(['success' => false, 'error' => 'Answer cannot be empty']);
                exit;
            }
            
            // Get inquiry details
            $stmt = $conn->prepare("
                SELECT i.*, u.phone, u.name as user_name, d.name as department_name
                FROM inquiries i
                JOIN users u ON i.user_id = u.id
                JOIN departments d ON i.department_id = d.id
                WHERE i.id = ?
            ");
            $stmt->bind_param("i", $inquiry_id);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows === 0) {
                header('HTTP/1.1 404 Not Found');
                echo json_encode(['success' => false, 'error' => 'Inquiry not found']);
                exit;
            }
            
            $inquiry = $result->fetch_assoc();
            
            // Get admin name
            $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
            $admin_stmt->bind_param("i", $admin_id);
            $admin_stmt->execute();
            $admin_result = $admin_stmt->get_result();
            $admin = $admin_result->fetch_assoc();
            $admin_name = $admin['name'] ?? 'Admin';
            
            // Update inquiry
            $update_stmt = $conn->prepare("
                UPDATE inquiries 
                SET answer = ?, status = 'answered', 
                    answeredby_admin_id = ?, updated_at = NOW() 
                WHERE id = ?
            ");
            $update_stmt->bind_param("sii", $answer, $admin_id, $inquiry_id);
            
            if (!$update_stmt->execute()) {
                throw new Exception('Failed to update inquiry');
            }
            
            // Send SMS notification
            $phone = formatPhoneNumber($inquiry['phone']);
            $sms_message = "Municipal MSWD Inquiry Response:\n";
            $sms_message .= "Your question: " . substr($inquiry['question'], 0, 50) . (strlen($inquiry['question']) > 50 ? "..." : "") . "\n";
            $sms_message .= "Our response: " . substr($answer, 0, 100) . (strlen($answer) > 100 ? "..." : "") . "\n";
            $sms_message .= "Answered by: $admin_name\n";
            $sms_message .= "Thank you for contacting us!";

            $sms_sent = sendSMS($sms_message, [$phone]);
            
            echo json_encode([
                'success' => true, 
                'message' => 'Inquiry answered successfully' . ($sms_sent ? '' : ' (but SMS failed to send)')
            ]);
            exit;
        }

        // Handle batch reschedule_past_due action
        if ($action === 'reschedule_past_due' && isset($_POST['date'])) {
            $currentDate = $_POST['date'];
            $newDate = $_POST['new_date'];
            
            if (empty($newDate)) {
                throw new Exception('Please select a valid date');
            }
            
            // Check daily limit for the new date
            $limitInfo = checkDailyLimit($conn, $newDate);
            if ($limitInfo['limit_reached']) {
                throw new Exception("Daily limit of {$dailyLimit} requests has been reached for {$newDate}. Cannot reschedule.");
            }
            
            // Get admin name for the message
            $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
            $admin_stmt->bind_param("i", $admin_id);
            $admin_stmt->execute();
            $admin_result = $admin_stmt->get_result();
            $admin = $admin_result->fetch_assoc();
            $admin_name = $admin['name'];
            
            // Get all requests for the current date (including walk-ins)
            $stmt = $conn->prepare("
                SELECT ar.id, u.phone, at.name as program_name, ar.reschedule_count, ar.is_walkin
                FROM mswd_requests ar
                LEFT JOIN users u ON ar.user_id = u.id
                JOIN mswd_types at ON ar.assistance_id = at.id
                WHERE ar.status = 'mswd_approved' AND ar.queue_date = ?
            ");
            $stmt->bind_param("s", $currentDate);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows === 0) {
                throw new Exception('No requests found for this date');
            }
            
            $successCount = 0;
            $failedCount = 0;
            $formattedNewDate = date('l, F d, Y', strtotime($newDate));
            
            // Get next queue number for the new date
            $nextQueueNumber = getNextQueueNumber($conn, $newDate);
            
            while ($request = $result->fetch_assoc()) {
                $request_id = $request['id'];
                $phone = $request['phone'];
                $program_name = $request['program_name'];
                $reschedule_count = $request['reschedule_count'] + 1;
                $is_walkin = $request['is_walkin'];
                
                // Only send SMS for non-walkin requests
                if (!$is_walkin) {
                    $message = "Municipal MSWD:\n";
                    $message .= "Request #$request_id ($program_name) - RESCHEDULED\n";
                    $message .= "New Date: $formattedNewDate\n";
                    $message .= "Queue Number: $nextQueueNumber\n";
                    $message .= "This is your " . ordinal($reschedule_count) . " reschedule\n";
                    $message .= "Processed by: $admin_name";
                    
                    $sms_sent = sendSMS($message, [$phone]);
                } else {
                    $sms_sent = true; // Skip SMS for walk-ins
                }
                
                $update = $conn->prepare("
                    UPDATE mswd_requests 
                    SET queue_date = ?,
                        queue_no = ?,
                        reschedule_count = ?,
                        rescheduledby_admin_id = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("siiii", $newDate, $nextQueueNumber, $reschedule_count, $admin_id, $request_id);
                
                if ($update->execute()) {
                    if ($sms_sent) {
                        $successCount++;
                        $nextQueueNumber++; // Increment for next request
                    } else {
                        $failedCount++;
                    }
                } else {
                    $failedCount++;
                }
            }
            
            if ($successCount > 0) {
                echo json_encode([
                    'success' => true,
                    'message' => "Rescheduled $successCount requests" . ($failedCount > 0 ? " ($failedCount failed)" : ""),
                    'limit_info' => [
                        'current_count' => $limitInfo['count'] + $successCount,
                        'remaining' => $dailyLimit - ($limitInfo['count'] + $successCount)
                    ]
                ]);
            } else {
                throw new Exception('Failed to reschedule any requests');
            }
            exit;
        }

        // Handle individual reschedule action
        if ($action === 'reschedule' && isset($_POST['id']) && isset($_POST['new_date'])) {
            $request_id = intval($_POST['id']);
            $newDate = $_POST['new_date'];
            $is_walkin = isset($_POST['is_walkin']) ? (int)$_POST['is_walkin'] : 0;
            
            if (empty($newDate)) {
                throw new Exception('Please select a valid date');
            }
            
            // Check daily limit for the new date
            $limitInfo = checkDailyLimit($conn, $newDate);
            if ($limitInfo['limit_reached']) {
                throw new Exception("Daily limit of {$dailyLimit} requests has been reached for {$newDate}. Cannot reschedule.");
            }
            
            // Get next queue number for the new date
            $nextQueueNumber = getNextQueueNumber($conn, $newDate);
            
            // Get admin name for the message
            $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
            $admin_stmt->bind_param("i", $admin_id);
            $admin_stmt->execute();
            $admin_result = $admin_stmt->get_result();
            $admin = $admin_result->fetch_assoc();
            $admin_name = $admin['name'];
            
            // Get request details
            $stmt = $conn->prepare("
                SELECT ar.*, 
                       CASE 
                           WHEN ar.is_walkin = 1 THEN ar.contact_no 
                           ELSE u.phone 
                       END as phone,
                       at.name as program_name,
                       ar.reschedule_count
                FROM mswd_requests ar
                LEFT JOIN users u ON ar.user_id = u.id
                JOIN mswd_types at ON ar.assistance_id = at.id
                WHERE ar.id = ?
            ");
            $stmt->bind_param("i", $request_id);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows === 0) {
                throw new Exception('Request not found');
            }

            $request = $result->fetch_assoc();
            $phone = $request['phone'];
            $program_name = $request['program_name'];
            $reschedule_count = $request['reschedule_count'] + 1;
            
            // Only send SMS for non-walkin requests
            if (!$is_walkin && !empty($phone)) {
                $formattedNewDate = date('l, F d, Y', strtotime($newDate));
                $message = "Municipal MSWD:\n";
                $message .= "Request #$request_id ($program_name) - RESCHEDULED\n";
                $message .= "New Date: $formattedNewDate\n";
                $message .= "Queue Number: $nextQueueNumber\n";
                $message .= "This is your " . ordinal($reschedule_count) . " reschedule\n";
                $message .= "Processed by: $admin_name";
                
                $sms_sent = sendSMS($message, [formatPhoneNumber($phone)]);
            } else {
                $sms_sent = true; // Skip SMS for walk-ins
            }
            
            $update = $conn->prepare("
                UPDATE mswd_requests 
                SET queue_date = ?,
                    queue_no = ?,
                    reschedule_count = ?,
                    rescheduledby_admin_id = ?,
                    updated_at = NOW()
                WHERE id = ?
            ");
            $update->bind_param("siiii", $newDate, $nextQueueNumber, $reschedule_count, $admin_id, $request_id);
            
            if (!$update->execute()) {
                throw new Exception('Failed to update database');
            }
            
            if (!$is_walkin && !empty($phone) && !$sms_sent) {
                throw new Exception('Failed to send SMS notification');
            }
            
            echo json_encode([
                'success' => true,
                'limit_info' => [
                    'current_count' => $limitInfo['count'] + 1,
                    'remaining' => $dailyLimit - ($limitInfo['count'] + 1)
                ]
            ]);
            exit;
        }

        if (!isset($_POST['id'])) {
            throw new Exception('Request ID not provided');
        }

        $request_id = intval($_POST['id']);
        $is_walkin = isset($_POST['is_walkin']) ? (int)$_POST['is_walkin'] : 0;
        
        // Get admin name for the message
        $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
        $admin_stmt->bind_param("i", $admin_id);
        $admin_stmt->execute();
        $admin_result = $admin_stmt->get_result();
        $admin = $admin_result->fetch_assoc();
        $admin_name = $admin['name'];
        
        // Modified query to handle walk-ins (which may not have user_id)
        $stmt = $conn->prepare("
            SELECT ar.*, 
                   CASE 
                       WHEN ar.is_walkin = 1 THEN ar.contact_no 
                       ELSE u.phone 
                   END as phone,
                   at.name as program_name,
                   at.id as assistance_id
            FROM mswd_requests ar
            LEFT JOIN users u ON ar.user_id = u.id
            JOIN mswd_types at ON ar.assistance_id = at.id
            WHERE ar.id = ?
        ");
        $stmt->bind_param("i", $request_id);
        $stmt->execute();
        $result = $stmt->get_result();
        
        if ($result->num_rows === 0) {
            throw new Exception('Request not found');
        }

        $request = $result->fetch_assoc();
        $phone = $request['phone'];
        $program_name = $request['program_name'];
        $current_status = $request['status'];
        $assistance_id = $request['assistance_id'];

        switch ($action) {
            case 'approve':
    $queue_date = trim($_POST['queue_date'] ?? '');
    
    if (empty($queue_date)) {
        throw new Exception('Please select a queue date');
    }
    
    // Check daily limit for the selected date
    $limitInfo = checkDailyLimit($conn, $queue_date);
    if ($limitInfo['limit_reached']) {
        throw new Exception("Daily limit of {$dailyLimit} requests has been reached for {$queue_date}. Cannot approve more requests.");
    }
    
    // Check if this is equipment (IDs 9-12) and if available
    $is_equipment = in_array($assistance_id, [9, 10, 11, 12]);
    if ($is_equipment) {
        $available_quantity = checkEquipmentAvailability($conn, $assistance_id);
        if ($available_quantity <= 0) {
            throw new Exception("No {$program_name} equipment available. Cannot approve request.");
        }
    }
    
    // Check if this is Sulong Dulong (IDs 33-35) and if slots available
    $is_sulong_dulong = in_array($assistance_id, [33, 34, 35]);
    if ($is_sulong_dulong) {
        $sulongDulongCount = $conn->query("SELECT COUNT(*) as total FROM sulong_dulong_beneficiaries WHERE status = 'Active'")->fetch_assoc()['total'];
        if ($sulongDulongCount >= 800) {
            throw new Exception("Sulong Dulong beneficiary limit of 800 has been reached. Cannot approve more requests.");
        }
    }
    
    // Get next queue number for the selected date
    $queue_no = getNextQueueNumber($conn, $queue_date);
    
    // Check if this assistance has ID 14 or 15
    $is_special_assistance = in_array($request['assistance_id'], [14, 15]);
    
    // Determine location based on assistance ID
    $location = $is_special_assistance ? "Former PUP" : "Municipal Hall";
    
    if (!$is_walkin) {
        $message = "Municipal MSWD:\n";
        $message .= "Request #$request_id ($program_name) - APPROVED\n";
        $message .= "Scheduled on: " . date('l, F d, Y', strtotime($queue_date)) . "\n";
        $message .= "Queue Number: $queue_no\n";
        $message .= "Approved by: $admin_name\n";
        $message .= "Please bring a valid ID and requirements on your scheduled date at the $location.";
    }
    
    // Start transaction
    $conn->begin_transaction();
    
    try {
        // Deduct equipment if this is an equipment request
        if ($is_equipment) {
            if (!deductEquipment($conn, $assistance_id)) {
                throw new Exception("Failed to deduct equipment quantity");
            }
        }
        
        // Add to Sulong Dulong beneficiaries if this is a Sulong Dulong request
if ($is_sulong_dulong) {
    $first_name = $request['first_name'] ?? '';
    $middle_name = $request['middle_name'] ?? '';
    $last_name = $request['last_name'] ?? '';
    $barangay_id = $request['barangay_id'] ?? 0;
    $birthday = $request['birthday'] ?? null;
    
    // Determine duration based on assistance ID
    $duration = '';
    switch ($assistance_id) {
        case 33: $duration = 'Every Month'; break;
        case 34: $duration = 'Per Sem'; break; // Changed from 1st Sem/2nd Sem to Per Sem
    }
    
    if (!empty($first_name) && !empty($last_name) && !empty($duration) && $barangay_id > 0) {
        // Check if beneficiary already exists
        $check_stmt = $conn->prepare("
            SELECT id FROM sulong_dulong_beneficiaries 
            WHERE first_name = ? AND last_name = ? AND barangay_id = ?
        ");
        $check_stmt->bind_param("ssi", $first_name, $last_name, $barangay_id);
        $check_stmt->execute();
        $check_result = $check_stmt->get_result();
        
        if ($check_result->num_rows > 0) {
            // Update existing beneficiary
            $existing = $check_result->fetch_assoc();
            $update_beneficiary = $conn->prepare("
                UPDATE sulong_dulong_beneficiaries 
                SET middle_name = ?, birthday = ?, duration = ?, status = 'Active'
                WHERE id = ?
            ");
            $update_beneficiary->bind_param("sssi", $middle_name, $birthday, $duration, $existing['id']);
            $update_beneficiary->execute();
        } else {
            // Insert new beneficiary
            $insert_beneficiary = $conn->prepare("
                INSERT INTO sulong_dulong_beneficiaries 
                (first_name, middle_name, last_name, birthday, barangay_id, duration, status)
                VALUES (?, ?, ?, ?, ?, ?, 'Active')
            ");
            $insert_beneficiary->bind_param("ssssis", $first_name, $middle_name, $last_name, $birthday, $barangay_id, $duration);
            $insert_beneficiary->execute();
        }
    }
}
        
        $update = $conn->prepare("
            UPDATE mswd_requests 
            SET status = 'mswd_approved', 
                approvedby_admin_id = ?,
                queue_date = ?,
                queue_no = ?,
                updated_at = NOW()
            WHERE id = ?
        ");
        $update->bind_param("isii", $admin_id, $queue_date, $queue_no, $request_id);
        
        if (!$update->execute()) {
            throw new Exception('Failed to update database');
        }
        
        if (!$is_walkin && !empty($phone) && !sendSMS($message, [formatPhoneNumber($phone)])) {
            throw new Exception('Failed to send SMS notification');
        }
        
        $conn->commit();
        
        echo json_encode([
            'success' => true,
            'limit_info' => [
                'current_count' => $limitInfo['count'] + 1,
                'remaining' => $dailyLimit - ($limitInfo['count'] + 1)
            ]
        ]);
    } catch (Exception $e) {
        $conn->rollback();
        throw $e;
    }
    break;
                
            case 'complete':
                $recipient = trim($_POST['recipient'] ?? '');
                $relation = trim($_POST['relation_to_recipient'] ?? '');
                $released_date = trim($_POST['released_date'] ?? date('Y-m-d'));
                $amount = isset($_POST['amount']) ? floatval($_POST['amount']) : null;
                
                if (empty($recipient)) {
                    throw new Exception('Please enter recipient name');
                }
                
                if (!$is_walkin && !empty($phone)) {
                    $formatted_date = date('l, F d, Y', strtotime($released_date));
                    $message = "Municipal MSWD Assistance:\n";
                    $message .= "Request #$request_id ($program_name) - COMPLETED\n";
                    $message .= "Released on: $formatted_date\n";
                    $message .= "Recipient: $recipient\n";
                    if (!empty($relation)) {
                        $message .= "Relation: $relation\n";
                    }
                    $message .= "Completed by: $admin_name\n";
                    $message .= "You may apply again in 3 months if you still need assistance.";
                }
                
                $update = $conn->prepare("
                    UPDATE mswd_requests 
                    SET status = 'completed', 
                        completedby_admin_id = ?,
                        recipient = ?,
                        relation_to_recipient = ?,
                        released_date = ?,
                        amount = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("isssdi", $admin_id, $recipient, $relation, $released_date, $amount, $request_id);
                
                if (!$update->execute()) {
                    throw new Exception('Failed to update database');
                }
                
                // Handle Sulong Dulong beneficiaries for assistance IDs 33, 34, 35
                $assistance_id = $request['assistance_id'];
                if (in_array($assistance_id, [33, 34, 35])) {
                    // Get the actual first name, middle name, and last name from the request
                    $first_name = $request['first_name'] ?? '';
                    $middle_name = $request['middle_name'] ?? '';
                    $last_name = $request['last_name'] ?? '';
                    
                    // Get barangay_id from the request
                    $barangay_id = $request['barangay_id'] ?? 0;
                    
                    // Get birthday from request
                    $birthday = $request['birthday'] ?? null;
                    
                    // Determine duration based on assistance ID
                    $duration = '';
                    switch ($assistance_id) {
                        case 33: $duration = 'Every Month'; break;
                        case 34: $duration = '1st Sem'; break;
                        case 35: $duration = '2nd Sem'; break;
                    }
                    
                    if (!empty($first_name) && !empty($last_name) && !empty($duration) && $barangay_id > 0) {
                        // Check if beneficiary already exists
                        $check_stmt = $conn->prepare("
                            SELECT id FROM sulong_dulong_beneficiaries 
                            WHERE first_name = ? AND last_name = ? AND barangay_id = ?
                        ");
                        $check_stmt->bind_param("ssi", $first_name, $last_name, $barangay_id);
                        $check_stmt->execute();
                        $check_result = $check_stmt->get_result();
                        
                        if ($check_result->num_rows > 0) {
                            // Update existing beneficiary
                            $existing = $check_result->fetch_assoc();
                            $update_beneficiary = $conn->prepare("
                                UPDATE sulong_dulong_beneficiaries 
                                SET middle_name = ?, birthday = ?, duration = ?
                                WHERE id = ?
                            ");
                            $update_beneficiary->bind_param("sssi", $middle_name, $birthday, $duration, $existing['id']);
                            $update_beneficiary->execute();
                        } else {
                            // Insert new beneficiary
                            $insert_beneficiary = $conn->prepare("
                                INSERT INTO sulong_dulong_beneficiaries 
                                (first_name, middle_name, last_name, birthday, barangay_id, duration)
                                VALUES (?, ?, ?, ?, ?, ?)
                            ");
                            $insert_beneficiary->bind_param("ssssis", $first_name, $middle_name, $last_name, $birthday, $barangay_id, $duration);
                            $insert_beneficiary->execute();
                        }
                    }
                }
                
                if (!$is_walkin && !empty($phone) && !sendSMS($message, [formatPhoneNumber($phone)])) {
                    throw new Exception('Failed to send SMS notification');
                }
                
                echo json_encode(['success' => true]);
                break;
                
            case 'decline':
    $reason = trim($_POST['reason'] ?? '');
    
    if (empty($reason)) {
        throw new Exception('Please provide a reason for declining');
    }
    
    // Determine if this should be a cancellation (if previously approved)
    $is_cancellation = ($request['status'] === 'mswd_approved');
    $status_to_set = $is_cancellation ? 'cancelled' : 'declined';
    
    // Check if this is equipment (IDs 9-12) and restore quantity if cancelled
    $is_equipment = in_array($assistance_id, [9, 10, 11, 12]);
    
    // Check if this is Sulong Dulong (IDs 33-35) and remove from beneficiaries if cancelled
    $is_sulong_dulong = in_array($assistance_id, [33, 34, 35]);
    
    if (!$is_walkin && !empty($phone)) {
        $message = "Municipal MSWD:\n";
        $message .= "Request #$request_id ($program_name) - " . strtoupper($status_to_set) . "\n";
        $message .= "Reason: $reason\n";
        $message .= $is_cancellation ? "Cancelled by: $admin_name\n" : "Declined by: $admin_name\n";
        $message .= "You may apply again if you still need assistance.";
    }
    
    // Start transaction
    $conn->begin_transaction();
    
    try {
        // Restore equipment if this is a cancellation of an equipment request
        if ($is_cancellation && $is_equipment) {
            if (!restoreEquipment($conn, $assistance_id)) {
                throw new Exception("Failed to restore equipment quantity");
            }
        }
        
        // Remove from Sulong Dulong beneficiaries if this is a cancellation of a Sulong Dulong request
        if ($is_cancellation && $is_sulong_dulong) {
            $first_name = $request['first_name'] ?? '';
            $last_name = $request['last_name'] ?? '';
            $barangay_id = $request['barangay_id'] ?? 0;
            
            if (!empty($first_name) && !empty($last_name) && $barangay_id > 0) {
                $delete_beneficiary = $conn->prepare("
                    DELETE FROM sulong_dulong_beneficiaries 
                    WHERE first_name = ? AND last_name = ? AND barangay_id = ?
                ");
                $delete_beneficiary->bind_param("ssi", $first_name, $last_name, $barangay_id);
                $delete_beneficiary->execute();
            }
        }
    
        $update = $conn->prepare("
            UPDATE mswd_requests 
            SET status = ?,
                reason = ?,
                " . ($is_cancellation ? "cancelledby_admin_id" : "declinedby_admin_id") . " = ?,
                queue_date = NULL,
                queue_no = NULL,
                updated_at = NOW()
            WHERE id = ?
        ");
        $update->bind_param("ssii", $status_to_set, $reason, $admin_id, $request_id);
        
        if (!$update->execute()) {
            throw new Exception('Failed to update database');
        }
        
        // Delete the uploaded files for this request
        $filesDeleted = deleteRequestFiles('mswd_requests', $request_id, $conn);
        
        // Clear file references from database
        $referencesCleared = clearFileReferences('mswd_requests', $request_id, $conn);
        
        if (!$is_walkin && !empty($phone) && !sendSMS($message, [formatPhoneNumber($phone)])) {
            throw new Exception('Failed to send SMS notification');
        }
        
        $conn->commit();
        
        $response = ['success' => true];
        
        // Add file deletion status to response for debugging
        if (!$filesDeleted || !$referencesCleared) {
            $response['warning'] = 'Request processed but some files may not have been deleted properly';
        }
        
        echo json_encode($response);
    } catch (Exception $e) {
        $conn->rollback();
        throw $e;
    }
    break;
                
            default:
                throw new Exception('Invalid action');
        }
    } catch (Exception $e) {
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }
} else {
    echo json_encode([
        'success' => false,
        'error' => 'Invalid request method'
    ]);
}


------------------------------------------------ PWD ADMIN PANEL

/mayor/pwd/admin/members.php:

<?php
session_start();
include '../../../includes/db.php';

// Check for admin session
if (!isset($_SESSION['pwd_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$pwd_admin_id = $_SESSION['pwd_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $pwd_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

// Get barangays for dropdown
$barangays = [];
$barangay_result = $conn->query("SELECT id, name FROM barangays ORDER BY name");
if ($barangay_result) {
    $barangays = $barangay_result->fetch_all(MYSQLI_ASSOC);
}

// Handle AJAX search requests
if (isset($_GET['ajax_search'])) {
    header('Content-Type: application/json');
    
    try {
        $search = isset($_GET['search']) ? trim($_GET['search']) : '';
        $barangay = isset($_GET['barangay']) ? intval($_GET['barangay']) : 0;
        
        $query = "SELECT m.id, m.first_name, m.middle_name, m.last_name, m.birthday, 
                         m.barangay_id, br.name as barangay_name
                  FROM pwd_birthday_members m
                  JOIN barangays br ON m.barangay_id = br.id
                  WHERE 1=1";
        $params = [];
        $types = '';
        
        if (!empty($search)) {
            $query .= " AND (m.first_name LIKE CONCAT('%', ?, '%') 
                          OR m.last_name LIKE CONCAT('%', ?, '%') 
                          OR m.id = ?)";
            $params[] = $search;
            $params[] = $search;
            $params[] = is_numeric($search) ? $search : 0;
            $types .= 'ssi';
        }
        
        if ($barangay > 0) {
            $query .= " AND m.barangay_id = ?";
            $params[] = $barangay;
            $types .= 'i';
        }
        
        $query .= " ORDER BY 
            CASE 
                WHEN DATE_FORMAT(birthday, '%m-%d') = DATE_FORMAT(CURDATE(), '%m-%d') THEN 1
                WHEN DATE_FORMAT(birthday, '%m-%d') > DATE_FORMAT(CURDATE(), '%m-%d') THEN 2
                ELSE 3
            END,
            DATE_FORMAT(birthday, '%m-%d'),
            m.last_name, m.first_name";
        
        $stmt = $conn->prepare($query);
        
        if (!empty($params)) {
            $stmt->bind_param($types, ...$params);
        }
        
        $stmt->execute();
        $result = $stmt->get_result();
        $members = $result->fetch_all(MYSQLI_ASSOC);
        
        echo json_encode($members);
        exit();
    } catch (Exception $e) {
        http_response_code(500);
        echo json_encode(['error' => 'Database error: ' . $e->getMessage()]);
        exit();
    }
}

$pageTitle = 'PWD Birthday Members';

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['add_member'])) {
        $first_name = $conn->real_escape_string($_POST['first_name'] ?? '');
        $middle_name = $conn->real_escape_string($_POST['middle_name'] ?? '');
        $last_name = $conn->real_escape_string($_POST['last_name'] ?? '');
        $birthday = $conn->real_escape_string($_POST['birthday'] ?? '');
        $barangay_id = intval($_POST['barangay_id'] ?? 0);
        
        $stmt = $conn->prepare("INSERT INTO pwd_birthday_members 
                                (first_name, middle_name, last_name, birthday, barangay_id) 
                                VALUES (?, ?, ?, ?, ?)");
        $stmt->bind_param("ssssi", $first_name, $middle_name, $last_name, $birthday, $barangay_id);
        
        if ($stmt->execute()) {
            header("Location: members.php?created=1");
            exit();
        } else {
            $_SESSION['error_message'] = 'Error adding member: ' . $conn->error;
            header("Location: members.php");
            exit();
        }
    }
    elseif (isset($_POST['update_member'])) {
        $id = intval($_POST['id']);
        $first_name = $conn->real_escape_string($_POST['first_name'] ?? '');
        $middle_name = $conn->real_escape_string($_POST['middle_name'] ?? '');
        $last_name = $conn->real_escape_string($_POST['last_name'] ?? '');
        $birthday = $conn->real_escape_string($_POST['birthday'] ?? '');
        $barangay_id = intval($_POST['barangay_id'] ?? 0);
        
        $stmt = $conn->prepare("UPDATE pwd_birthday_members 
                               SET first_name = ?, middle_name = ?, last_name = ?, 
                                   birthday = ?, barangay_id = ?
                               WHERE id = ?");
        $stmt->bind_param("ssssii", $first_name, $middle_name, $last_name, $birthday, $barangay_id, $id);
        
        if ($stmt->execute()) {
            header("Location: members.php?updated=1");
            exit();
        } else {
            $_SESSION['error_message'] = 'Error updating member: ' . $conn->error;
            header("Location: members.php");
            exit();
        }
    }
    elseif (isset($_POST['delete_member'])) {
        $id = intval($_POST['id']);
        
        $stmt = $conn->prepare("DELETE FROM pwd_birthday_members WHERE id = ?");
        $stmt->bind_param("i", $id);
        
        if ($stmt->execute()) {
            header("Location: members.php?deleted=1");
            exit();
        } else {
            $_SESSION['error_message'] = 'Error deleting member: ' . $conn->error;
            header("Location: members.php");
            exit();
        }
    }
}

// Get current count of members
$count_result = $conn->query("SELECT COUNT(*) as total FROM pwd_birthday_members");
$count_row = $count_result->fetch_assoc();
$current_count = $count_row['total'];

// Get today's birthdays
$today = date('m-d');
$birthday_query = $conn->query("
    SELECT m.id, m.first_name, m.middle_name, m.last_name, m.birthday, 
           br.name as barangay_name, 
           CASE 
               WHEN DATE_FORMAT(m.birthday, '%m-%d') = '$today' THEN 'today'
               WHEN DATE_FORMAT(m.birthday, '%m-%d') BETWEEN 
                    DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 DAY), '%m-%d') AND 
                    DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 7 DAY), '%m-%d') THEN 'upcoming'
               ELSE 'other'
           END as birthday_status
    FROM pwd_birthday_members m
    JOIN barangays br ON m.barangay_id = br.id
    WHERE DATE_FORMAT(m.birthday, '%m-%d') BETWEEN 
          DATE_FORMAT(CURDATE(), '%m-%d') AND 
          DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 7 DAY), '%m-%d')
    ORDER BY 
        CASE 
            WHEN DATE_FORMAT(m.birthday, '%m-%d') = '$today' THEN 1
            ELSE 2
        END,
        DATE_FORMAT(m.birthday, '%m-%d'),
        m.last_name, m.first_name
");
$birthday_members = $birthday_query ? $birthday_query->fetch_all(MYSQLI_ASSOC) : [];

// Pagination
$per_page = 10;
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$offset = ($page - 1) * $per_page;

// Get total count
$total_query = "SELECT COUNT(*) as total FROM pwd_birthday_members";
$total_result = $conn->query($total_query);
$total_row = $total_result->fetch_assoc();
$total_members = $total_row['total'];
$total_pages = ceil($total_members / $per_page);

// Get members for current page - sorted by birthday (today first, then upcoming, then others)
$query = "SELECT m.id, m.first_name, m.middle_name, m.last_name, m.birthday, 
                 m.barangay_id, br.name as barangay_name
          FROM pwd_birthday_members m
          JOIN barangays br ON m.barangay_id = br.id
          ORDER BY 
            CASE 
                WHEN DATE_FORMAT(birthday, '%m-%d') = DATE_FORMAT(CURDATE(), '%m-%d') THEN 1
                WHEN DATE_FORMAT(birthday, '%m-%d') > DATE_FORMAT(CURDATE(), '%m-%d') THEN 2
                ELSE 3
            END,
            DATE_FORMAT(birthday, '%m-%d'),
            m.last_name, m.first_name
          LIMIT $per_page OFFSET $offset";
$result = $conn->query($query);
$members = $result ? $result->fetch_all(MYSQLI_ASSOC) : [];

include '../../../includes/header.php';
?>


/mayor/pwd/admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require '../../../includes/send_sms.php';

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['pwd_admin_id'])) {
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit;
}

$admin_id = $_SESSION['pwd_admin_id'];

header('Content-Type: application/json');

// Helper function to format phone numbers
function formatPhoneNumber($phone) {
    $phone = preg_replace('/[^0-9]/', '', $phone);
    if (strpos($phone, '0') === 0) {
        return '+63' . substr($phone, 1);
    }
    if (strpos($phone, '63') === 0) {
        return '+' . $phone;
    }
    if (strpos($phone, '+') === 0) {
        return $phone;
    }
    return '+63' . $phone;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (!isset($_POST['action'])) {
            throw new Exception('No action specified');
        }

        $action = $_POST['action'];

        // Handle inquiry answer action
        if ($action === 'answer_inquiry' && isset($_POST['inquiry_id']) && isset($_POST['answer'])) {
            $inquiry_id = intval($_POST['inquiry_id']);
            $answer = trim($_POST['answer']);
            
            if (empty($answer)) {
                header('HTTP/1.1 400 Bad Request');
                echo json_encode(['success' => false, 'error' => 'Answer cannot be empty']);
                exit;
            }
            
            // Get inquiry details
            $stmt = $conn->prepare("
                SELECT i.*, u.phone, u.name as user_name, d.name as department_name
                FROM inquiries i
                JOIN users u ON i.user_id = u.id
                JOIN departments d ON i.department_id = d.id
                WHERE i.id = ?
            ");
            $stmt->bind_param("i", $inquiry_id);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows === 0) {
                header('HTTP/1.1 404 Not Found');
                echo json_encode(['success' => false, 'error' => 'Inquiry not found']);
                exit;
            }
            
            $inquiry = $result->fetch_assoc();
            
            // Get admin name
            $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
            $admin_stmt->bind_param("i", $admin_id);
            $admin_stmt->execute();
            $admin_result = $admin_stmt->get_result();
            $admin = $admin_result->fetch_assoc();
            $admin_name = $admin['name'] ?? 'PWD Admin';
            
            // Update inquiry
            $update_stmt = $conn->prepare("
                UPDATE inquiries 
                SET answer = ?, status = 'answered', 
                    answeredby_admin_id = ?, updated_at = NOW() 
                WHERE id = ?
            ");
            $update_stmt->bind_param("sii", $answer, $admin_id, $inquiry_id);
            
            if (!$update_stmt->execute()) {
                throw new Exception('Failed to update inquiry');
            }
            
            // Send SMS notification
            $phone = formatPhoneNumber($inquiry['phone']);
            $sms_message = "Municipal PWD Inquiry Response:\n";
            $sms_message .= "Your question: " . substr($inquiry['question'], 0, 50) . (strlen($inquiry['question']) > 50 ? "..." : "") . "\n";
            $sms_message .= "Our response: " . substr($answer, 0, 100) . (strlen($answer) > 100 ? "..." : "") . "\n";
            $sms_message .= "Answered by: $admin_name\n";
            $sms_message .= "Thank you for contacting us!";

            $sms_sent = sendSMS($sms_message, [$phone]);
            
            echo json_encode([
                'success' => true, 
                'message' => 'Inquiry answered successfully' . ($sms_sent ? '' : ' (but SMS failed to send)')
            ]);
            exit;
        }

        throw new Exception('Invalid action');
    } catch (Exception $e) {
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }
} else {
    echo json_encode([
        'success' => false,
        'error' => 'Invalid request method'
    ]);
}


------------------------------------------------ ANIMAL AND POUND ADMIN PANEL

/mayor/animal/admin/pending.php:

<?php
session_start();
include '../../../includes/db.php';

// Check for admin session
if (!isset($_SESSION['animal_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$admin_id = $_SESSION['animal_admin_id'];
$admin_name = 'Animal Control Admin'; // Default value

try {
    $admin_query = $conn->prepare("SELECT name FROM admins WHERE id = ?");
    $admin_query->bind_param("i", $admin_id);
    $admin_query->execute();
    $admin_result = $admin_query->get_result();

    if ($admin_result && $admin_result->num_rows > 0) {
        $admin_data = $admin_result->fetch_assoc();
        $admin_name = $admin_data['name'];
    }
} catch (Exception $e) {
    error_log("Admin query error: " . $e->getMessage());
}

$pageTitle = 'Pending';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    if (empty($phone)) return 'N/A';
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Initialize empty arrays for each type
$groupedRequests = [
    'Dog Claiming' => [],
    'Dog Adoption' => [],
    'Rabid Report' => []
];

$hasRequests = false;

try {
    // Fetch pending claims - FIXED THE QUERY
    $pending_claims = $conn->query("
    SELECT dc.id, 
           CONCAT(dc.last_name, ', ', dc.first_name, ' ', IF(dc.middle_name IS NULL OR dc.middle_name = '', '', CONCAT(LEFT(dc.middle_name, 1), '.'))) AS name,
           dc.phone as contact_number,  -- Changed from u.phone to dc.phone
           dc.created_at,
           dc.name_of_dog,
           'Dog Claiming' as program_type
    FROM dog_claims dc
    WHERE dc.status = 'pending'
");
    
    if ($pending_claims) {
        while ($row = $pending_claims->fetch_assoc()) {
            $groupedRequests['Dog Claiming'][] = $row;
            $hasRequests = true;
        }
    } else {
        throw new Exception("Dog claims query failed: " . $conn->error);
    }

    // ADDED: Fetch pending adoptions (this was missing entirely)
    $pending_adoptions = $conn->query("
        SELECT da.id, 
               CONCAT(da.last_name, ', ', da.first_name, ' ', IF(da.middle_name IS NULL OR da.middle_name = '', '', CONCAT(LEFT(da.middle_name, 1), '.'))) AS name,
               u.phone as contact_number,
               da.created_at,
               NULL as name_of_dog,
               'Dog Adoption' as program_type
        FROM dog_adoptions da
        LEFT JOIN users u ON da.user_id = u.id
        WHERE da.status = 'pending'
    ");
    
    if ($pending_adoptions) {
        while ($row = $pending_adoptions->fetch_assoc()) {
            $groupedRequests['Dog Adoption'][] = $row;
            $hasRequests = true;
        }
    } else {
        throw new Exception("Dog adoptions query failed: " . $conn->error);
    }

    // Fetch pending reports
    $pending_reports = $conn->query("
        SELECT rr.id, 
               CONCAT(rr.last_name, ', ', rr.first_name, ' ', IF(rr.middle_name IS NULL OR rr.middle_name = '', '', CONCAT(LEFT(rr.middle_name, 1), '.'))) AS name,
               u.phone as contact_number,
               rr.created_at,
               NULL as name_of_dog,
               'Rabid Report' as program_type
        FROM rabid_reports rr
        LEFT JOIN users u ON rr.user_id = u.id
        WHERE rr.status = 'pending'
    ");
    
    if ($pending_reports) {
        while ($row = $pending_reports->fetch_assoc()) {
            $groupedRequests['Rabid Report'][] = $row;
            $hasRequests = true;
        }
    } else {
        throw new Exception("Rabid reports query failed: " . $conn->error);
    }

} catch (Exception $e) {
    error_log($e->getMessage());
    echo "<div class='alert alert-danger'>Error loading pending requests: " . htmlspecialchars($e->getMessage()) . "</div>";
}
?>


/mayor/animal/admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require '../../../includes/send_sms.php';
// Include the file deletion function
require_once '../../../includes/delete_request_files.php';

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['animal_admin_id'])) {
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit;
}

$admin_id = $_SESSION['animal_admin_id'];

header('Content-Type: application/json');

// Helper function for ordinal numbers
function ordinal($number) {
    $suffixes = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
    if (($number % 100) >= 11 && ($number % 100) <= 13) {
        return $number . 'th';
    }
    return $number . $suffixes[$number % 10];
}

// Helper function to format phone numbers
function formatPhoneNumber($phone) {
    // Remove all non-numeric characters
    $phone = preg_replace('/[^0-9]/', '', $phone);
    
    // If starts with 0, convert to +63 format
    if (strpos($phone, '0') === 0) {
        return '+63' . substr($phone, 1);
    }
    
    // If starts with 63, add +
    if (strpos($phone, '63') === 0) {
        return '+' . $phone;
    }
    
    // If starts with +, leave as is
    if (strpos($phone, '+') === 0) {
        return $phone;
    }
    
    // Default: assume it's missing country code
    return '+63' . $phone;
}

// Function to calculate fine based on offense count
function calculateFine($totalClaims) {
    // Offense count is total_claims + 1 (current claim)
    $offenseCount = intval($totalClaims) + 1;
    
    $fineAmount = 0;
    
    // Fine structure: 1st=300, 2nd=500, 3rd=800 (capped at 3rd offense)
    if ($offenseCount === 1) {
        $fineAmount = 300;
    } else if ($offenseCount === 2) {
        $fineAmount = 500;
    } else {
        $fineAmount = 800; // 3rd offense and beyond (capped at 800)
    }
    
    return [
        'offenseCount' => $offenseCount,
        'fineAmount'   => $fineAmount,
        'offenseText'  => $offenseCount === 1 ? '1st offense' : 
                         ($offenseCount === 2 ? '2nd offense' : 
                         ($offenseCount === 3 ? '3rd offense' : 
                         $offenseCount . 'th offense'))
    ];
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (!isset($_POST['action'])) {
            throw new Exception('No action specified');
        }

        $action = $_POST['action'];

        // Handle inquiry answer action
        if ($action === 'answer_inquiry' && isset($_POST['inquiry_id']) && isset($_POST['answer'])) {
            $inquiry_id = intval($_POST['inquiry_id']);
            $answer = trim($_POST['answer']);
            
            if (empty($answer)) {
                header('HTTP/1.1 400 Bad Request');
                echo json_encode(['success' => false, 'error' => 'Answer cannot be empty']);
                exit;
            }
            
            try {
                // First get the inquiry details for SMS
                $stmt = $conn->prepare("
                    SELECT i.*, u.phone, u.name as user_name, d.name as department_name
                    FROM inquiries i
                    JOIN users u ON i.user_id = u.id
                    JOIN departments d ON i.department_id = d.id
                    WHERE i.id = ?
                ");
                $stmt->bind_param("i", $inquiry_id);
                $stmt->execute();
                $result = $stmt->get_result();
                
                if ($result->num_rows === 0) {
                    header('HTTP/1.1 404 Not Found');
                    echo json_encode(['success' => false, 'error' => 'Inquiry not found']);
                    exit;
                }
                
                $inquiry = $result->fetch_assoc();
                
                // Get admin name for SMS
                $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
                $admin_stmt->bind_param("i", $admin_id);
                $admin_stmt->execute();
                $admin_result = $admin_stmt->get_result();
                $admin = $admin_result->fetch_assoc();
                $admin_name = $admin['name'] ?? 'Admin';
                
                // Update the inquiry
                $update_stmt = $conn->prepare("UPDATE inquiries 
                                       SET answer = ?, status = 'answered', 
                                           answeredby_admin_id = ?, updated_at = NOW() 
                                       WHERE id = ?");
                $update_stmt->bind_param("sii", $answer, $admin_id, $inquiry_id);
                
                if (!$update_stmt->execute()) {
                    header('HTTP/1.1 500 Internal Server Error');
                    echo json_encode(['success' => false, 'error' => 'Failed to update inquiry: ' . $conn->error]);
                    exit;
                }
                
                // Send SMS notification
                $phone = $inquiry['phone'];
                $formatted_phone = formatPhoneNumber($phone);

                $sms_message = "Municipal Animal Control Inquiry Response:\n";
                $sms_message .= "Your question: " . substr($inquiry['question'], 0, 50) . (strlen($inquiry['question']) > 50 ? "..." : "") . "\n";
                $sms_message .= "Our response: " . substr($answer, 0, 100) . (strlen($answer) > 100 ? "..." : "") . "\n";
                $sms_message .= "Answered by: $admin_name\n";
                $sms_message .= "Thank you for contacting us!";

                $sms_sent = false;
                try {
                    // Add debug logging
                    error_log("Attempting to send SMS to: " . $formatted_phone);
                    error_log("SMS content: " . $sms_message);
                    
                    $sms_sent = sendSMS($sms_message, [$formatted_phone]);
                    
                    if (!$sms_sent) {
                        error_log("SMS sending returned false");
                    }
                } catch (Exception $e) {
                    error_log("SMS sending failed: " . $e->getMessage());
                }
                
                echo json_encode([
                    'success' => true, 
                    'message' => 'Inquiry answered successfully' . ($sms_sent ? '' : ' (but SMS failed to send)'),
                    'debug' => [
                        'phone' => $formatted_phone,
                        'sms_function' => function_exists('sendSMS') ? 'exists' : 'missing',
                        'sms_result' => $sms_sent
                    ]
                ]);
                exit;
            } catch (Exception $e) {
                header('HTTP/1.1 500 Internal Server Error');
                echo json_encode(['success' => false, 'error' => $e->getMessage()]);
                exit;
            }
        }

        if (!isset($_POST['id']) || !isset($_POST['type'])) {
            throw new Exception('Missing required parameters');
        }

        $request_id = intval($_POST['id']);
        $request_type = $_POST['type'];
        
        // Get admin name
        $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
        $admin_stmt->bind_param("i", $admin_id);
        $admin_stmt->execute();
        $admin_result = $admin_stmt->get_result();
        $admin = $admin_result->fetch_assoc();
        $admin_name = $admin['name'];

        // Get user phone number and fine details for dog claiming
        $phone = null;
        $fine_details = null;
        
        if ($request_type === 'dog_claiming') {
            // Get phone from dog_claims table (not users table)
            $stmt = $conn->prepare("SELECT phone, status FROM dog_claims WHERE id = ?");
            $stmt->bind_param("i", $request_id);
            $stmt->execute();
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                $request = $result->fetch_assoc();
                $phone = $request['phone'];
                $current_status = $request['status'];
            }
            
            // Get claimer details for fine calculation if approving
            if ($action === 'approve') {
                $stmt = $conn->prepare("SELECT first_name, last_name, birthday, barangay_id FROM dog_claims WHERE id = ?");
                $stmt->bind_param("i", $request_id);
                $stmt->execute();
                $result = $stmt->get_result();
                
                if ($result->num_rows > 0) {
                    $claim = $result->fetch_assoc();
                    $first_name = $claim['first_name'];
                    $last_name = $claim['last_name'];
                    $birthday = $claim['birthday'];
                    $barangay_id = $claim['barangay_id'];
                    
                    // Get the claimer's data from dog_claimers table
                    $stmt = $conn->prepare("SELECT total_claims FROM dog_claimers WHERE first_name = ? AND last_name = ? AND birthday = ? AND barangay_id = ?");
                    $stmt->bind_param("sssi", $first_name, $last_name, $birthday, $barangay_id);
                    $stmt->execute();
                    $claimer_result = $stmt->get_result();
                    
                    if ($claimer_result->num_rows > 0) {
                        $claimer = $claimer_result->fetch_assoc();
                        $total_claims = $claimer['total_claims'];
                    } else {
                        $total_claims = 0; // First offense if no record exists
                    }
                    
                    $fine_details = calculateFine($total_claims);
                }
            }
        } 
        elseif ($request_type === 'dog_adoption') {
            $stmt = $conn->prepare("SELECT u.phone, r.status FROM dog_adoptions r LEFT JOIN users u ON r.user_id = u.id WHERE r.id = ?");
            $stmt->bind_param("i", $request_id);
            $stmt->execute();
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                $request = $result->fetch_assoc();
                $phone = $request['phone'];
                $current_status = $request['status'];
            }
        } 
        elseif ($request_type === 'rabid_report') {
            $stmt = $conn->prepare("SELECT u.phone, r.status FROM rabid_reports r LEFT JOIN users u ON r.user_id = u.id WHERE r.id = ?");
            $stmt->bind_param("i", $request_id);
            $stmt->execute();
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                $request = $result->fetch_assoc();
                $phone = $request['phone'];
                $current_status = $request['status'];
            }
        }

        $message = "Municipal Animal Control:\n";
        
        switch ($request_type) {
            case 'dog_claiming':
            case 'dog_adoption':
                $program = ($request_type === 'dog_claiming') ? 'Dog Retrieving' : 'Dog Adoption';
                
                switch ($action) {
                    case 'approve':
                        // For dog claiming, set offense_count and fine_amount
                        if ($request_type === 'dog_claiming' && $fine_details) {
                            $update = $conn->prepare("UPDATE dog_claims SET status = 'approved', approvedby_admin_id = ?, offense_count = ?, fine_amount = ?, updated_at = NOW() WHERE id = ?");
                            $update->bind_param("iiii", $admin_id, $fine_details['offenseCount'], $fine_details['fineAmount'], $request_id);
                        } else {
                            $update = $conn->prepare("UPDATE " . ($request_type === 'dog_claiming' ? 'dog_claims' : 'dog_adoptions') . " SET status = 'approved', approvedby_admin_id = ?, updated_at = NOW() WHERE id = ?");
                            $update->bind_param("ii", $admin_id, $request_id);
                        }
                        
                        if (!$update->execute()) {
                            throw new Exception('Failed to update database');
                        }
                        
                        $message .= "$program #$request_id - APPROVED\n";
                        $message .= "Approved by: $admin_name\n";
                        
                        // Add fine details for dog claiming
                        if ($request_type === 'dog_claiming' && $fine_details) {
                            $message .= "This is your " . $fine_details['offenseText'] . "\n";
                            $message .= "Fine Amount: " . $fine_details['fineAmount'] . " Pesos\n";
                            $message .= "Please prepare the amount before retrieving your dog.\n";
                        }
                        
                        $message .= "Please visit the municipal hall to complete the process.";
                        break;
                        
                    case 'decline':
                        $reason = trim($_POST['reason'] ?? '');
                        if (empty($reason)) {
                            throw new Exception('Please provide a reason');
                        }
                        
                        $is_cancellation = ($current_status === 'approved');
                        $status_to_set = $is_cancellation ? 'cancelled' : 'declined';
                        $admin_field = $is_cancellation ? 'cancelledby_admin_id' : 'declinedby_admin_id';
                        
                        $update = $conn->prepare("UPDATE " . ($request_type === 'dog_claiming' ? 'dog_claims' : 'dog_adoptions') . " SET status = ?, reason = ?, $admin_field = ?, updated_at = NOW() WHERE id = ?");
                        $update->bind_param("ssii", $status_to_set, $reason, $admin_id, $request_id);
                        
                        if (!$update->execute()) {
                            throw new Exception('Failed to update database');
                        }
                        
                        $action_word = $is_cancellation ? 'CANCELLED' : 'DECLINED';
                        $message .= "$program #$request_id - $action_word\n";
                        $message .= "Reason: $reason\n";
                        $message .= "Processed by: $admin_name\n";
                        $message .= "Please visit the municipal hall for more information.";
                        break;
                        
                    default:
                        throw new Exception('Invalid action');
                }
                break;
                
            case 'rabid_report':
                switch ($action) {
                    case 'verify':
                        $update = $conn->prepare("UPDATE rabid_reports SET status = 'verified', verifiedby_admin_id = ?, updated_at = NOW() WHERE id = ?");
                        $update->bind_param("ii", $admin_id, $request_id);
                        
                        if (!$update->execute()) {
                            throw new Exception('Failed to update database');
                        }
                        
                        $message .= "Rabid Report #$request_id - CAUGHT\n";
                        $message .= "Verified by: $admin_name\n";
                        $message .= "Thank you for your report. The dog has already been caught.";
                        break;
                        
                    case 'false_report':
                        $reason = trim($_POST['reason'] ?? '');
                        if (empty($reason)) {
                            throw new Exception('Please provide a reason');
                        }
                        
                        // Determine the report title and closing message based on the reason
                        if ($reason === "False information") {
                            $report_title = "FALSE REPORT";
                            $sms_reason = "False information";
                            $closing_message = "Please provide accurate information in future reports.";
                        } else if ($reason === "Report is irrelevant / not seen in the area") {
                            $report_title = "UNFOUNDED REPORT";
                            $sms_reason = "Irrelevant (dog no longer in the area)";
                            $closing_message = "Kindly report as soon as possible next time.";
                        } else {
                            $report_title = "FALSE REPORT";
                            $sms_reason = $reason;
                            $closing_message = "Please provide accurate information in future reports.";
                        }
                        
                        $update = $conn->prepare("UPDATE rabid_reports SET status = 'false_report', reason = ?, cancelledby_admin_id = ?, updated_at = NOW() WHERE id = ?");
                        $update->bind_param("sii", $reason, $admin_id, $request_id);
                        
                        if (!$update->execute()) {
                            throw new Exception('Failed to update database');
                        }
                        
                        // Delete the uploaded proof file for this rabid report
                        $filesDeleted = deleteRequestFiles('rabid_reports', $request_id, $conn);
                        
                        // Clear file reference from database
                        $referencesCleared = clearFileReferences('rabid_reports', $request_id, $conn);
                        
                        $message .= "Rabid Report #$request_id - $report_title\n";
                        $message .= "Reason: $sms_reason\n";
                        $message .= "Processed by: $admin_name\n";
                        $message .= $closing_message;
                        
                        $response = ['success' => true];
                        
                        // Add file deletion status to response for debugging
                        if (!$filesDeleted || !$referencesCleared) {
                            $response['warning'] = 'Report marked as false but proof file may not have been deleted properly';
                        }
                        break;
                        
                    default:
                        throw new Exception('Invalid action');
                }
                break;
                
            default:
                throw new Exception('Invalid request type');
        }

        // Send SMS if phone number exists
        if ($phone) {
            $formatted_phone = formatPhoneNumber($phone);
            if (!sendSMS($message, [$formatted_phone])) {
                error_log("Failed to send SMS for $request_type $request_id to $formatted_phone");
            } else {
                error_log("SMS sent successfully to $formatted_phone for $request_type $request_id");
            }
        } else {
            error_log("No phone number found for $request_type $request_id");
        }

        echo json_encode(['success' => true]);
    } catch (Exception $e) {
        error_log("Error in update_status.php: " . $e->getMessage());
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }
} else {
    echo json_encode([
        'success' => false,
        'error' => 'Invalid request method'
    ]);
}


/mayor/animal/pound_admin/approved.php:

<?php
session_start();
include '../../../includes/db.php';

// Check for admin session
if (!isset($_SESSION['pound_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$admin_id = $_SESSION['pound_admin_id'];
$admin_name = 'Pound Admin'; // Default value

try {
    $admin_query = $conn->prepare("SELECT name FROM admins WHERE id = ?");
    $admin_query->bind_param("i", $admin_id);
    $admin_query->execute();
    $admin_result = $admin_query->get_result();

    if ($admin_result && $admin_result->num_rows > 0) {
        $admin_data = $admin_result->fetch_assoc();
        $admin_name = $admin_data['name'];
    }
} catch (Exception $e) {
    error_log("Admin query error: " . $e->getMessage());
}

$pageTitle = 'Approved';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    if (empty($phone)) return 'N/A';
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Initialize empty arrays for each type
$groupedRequests = [
    'Dog Claiming' => [],
    'Dog Adoption' => []
];

$hasRequests = false;

try {
// Fetch approved claims (both online and walk-in)
$approved_claims = $conn->query("
    SELECT dc.id, 
           CONCAT(dc.last_name, ', ', dc.first_name, ' ', IF(dc.middle_name IS NULL OR dc.middle_name = '', '', CONCAT(LEFT(dc.middle_name, 1), '.'))) as name,
           dc.phone as contact_number,
           CASE WHEN dc.user_id IS NULL THEN 'Walk-in' ELSE 'Online' END as request_type,
           dc.created_at as approved_date,
           dc.name_of_dog,
           'Dog Claiming' as program_type,
           dc.status,
           dc.user_id,
           dc.offense_count,
           dc.fine_amount
    FROM dog_claims dc
    LEFT JOIN users u ON dc.user_id = u.id
    LEFT JOIN dogs d ON dc.dog_id = d.id
    WHERE dc.status = 'approved'
");

    if ($approved_claims) {
        while ($row = $approved_claims->fetch_assoc()) {
            $groupedRequests['Dog Claiming'][] = $row;
            $hasRequests = true;
        }
    } else {
        throw new Exception("Dog claims query failed: " . $conn->error);
    }

    // Fetch approved adoptions (both online and walk-in)
    $approved_adoptions = $conn->query("
        SELECT da.id, 
               CONCAT(da.last_name, ', ', da.first_name, ' ', IF(da.middle_name IS NULL OR da.middle_name = '', '', CONCAT(LEFT(da.middle_name, 1), '.'))) as name,
               u.phone as contact_number,
               CASE WHEN da.user_id IS NULL THEN 'Walk-in' ELSE 'Online' END as request_type,
               da.created_at as approved_date,
               NULL as name_of_dog,
               'Dog Adoption' as program_type,
               da.status,
               da.user_id
        FROM dog_adoptions da
        LEFT JOIN users u ON da.user_id = u.id
        LEFT JOIN dogs d ON da.dog_id = d.id
        WHERE da.status = 'approved'
    ");
    
    if ($approved_adoptions) {
        while ($row = $approved_adoptions->fetch_assoc()) {
            $groupedRequests['Dog Adoption'][] = $row;
            $hasRequests = true;
        }
    } else {
        throw new Exception("Dog adoptions query failed: " . $conn->error);
    }

} catch (Exception $e) {
    error_log($e->getMessage());
    echo "<div class='alert alert-danger'>Error loading approved requests: " . htmlspecialchars($e->getMessage()) . "</div>";
}
?>


/mayor/animal/pound_admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require '../../../includes/send_sms.php';

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['pound_admin_id'])) {
    echo json_encode(['success' => false, 'message' => 'Unauthorized access']);
    exit;
}

$admin_id = $_SESSION['pound_admin_id'];

header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // Initialize response
        $response = ['success' => false, 'message' => ''];
        
        // Get request parameters from either form data or JSON
        $input = file_get_contents('php://input');
        $data = json_decode($input, true);
        
        if ($data === null && json_last_error() !== JSON_ERROR_NONE) {
            // If not JSON, try form data
            $data = $_POST;
        }

        // Validate required parameters
        if (empty($data['action']) || empty($data['id']) || empty($data['type'])) {
            throw new Exception('Missing required parameters (action, id, or type)');
        }
        
        $action = $data['action'];
        $request_id = intval($data['id']);
        $request_type = strtolower(trim($data['type']));
        
        // Determine the table based on request type
        if ($request_type === 'claim') {
            $table = 'dog_claims';
            $program = 'Dog Retrieving';
        } elseif ($request_type === 'adoption') {
            $table = 'dog_adoptions';
            $program = 'Dog Adoption';
        } else {
            throw new Exception('Invalid request type. Must be "claim" or "adoption"');
        }

        // Start transaction
        $conn->begin_transaction();

        // Get admin name
        $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
        $admin_stmt->bind_param("i", $admin_id);
        if (!$admin_stmt->execute()) {
            throw new Exception('Failed to fetch admin details');
        }
        $admin_result = $admin_stmt->get_result();
        $admin = $admin_result->fetch_assoc();
        $admin_name = $admin['name'] ?? 'Admin';

        // Get request details including user_id to check if it's a walk-in
        $stmt = $conn->prepare("SELECT user_id, status, dog_id, first_name, middle_name, last_name, birthday, barangay_id, phone FROM $table WHERE id = ?");
        if (!$stmt) {
            throw new Exception("Failed to prepare statement: " . $conn->error);
        }
        $stmt->bind_param("i", $request_id);
        if (!$stmt->execute()) {
            throw new Exception('Failed to fetch request details: ' . $stmt->error);
        }
        $result = $stmt->get_result();
        
        if ($result->num_rows === 0) {
            throw new Exception("Request not found (ID: $request_id in table $table)");
        }
        
        $request = $result->fetch_assoc();
        $is_walkin = ($request['user_id'] === null);
        $current_status = $request['status'];
        $dog_id = $request['dog_id'];

        // Verify request is in approved status
        if ($current_status !== 'approved') {
            throw new Exception("Request must be in approved status (current status: $current_status)");
        }

        $message = "Municipal Animal Control:\n$program #$request_id - ";

        switch ($action) {
            case 'complete':
                // Handle receipt photo upload for dog claims (required)
                $receipt_photo_path = null;
                
                if ($request_type === 'claim') {
                    if (empty($_FILES['receipt_photo']['tmp_name'])) {
                        throw new Exception('Receipt photo is required for dog claims to verify payment');
                    }
                    
                    $upload_dir = '../../../uploads/receipts/';
                    if (!is_dir($upload_dir)) {
                        mkdir($upload_dir, 0777, true);
                    }
                    
                    $file_ext = pathinfo($_FILES['receipt_photo']['name'], PATHINFO_EXTENSION);
                    $filename = 'receipt_' . $request_id . '_' . time() . '.' . $file_ext;
                    $target_path = $upload_dir . $filename;
                    
                    if (move_uploaded_file($_FILES['receipt_photo']['tmp_name'], $target_path)) {
                        $receipt_photo_path = 'uploads/receipts/' . $filename;
                    } else {
                        throw new Exception('Failed to upload receipt photo');
                    }
                }

                // Handle handover photo upload (optional)
                $handover_photo_path = null;
                if (!empty($_FILES['handover_photo']['tmp_name'])) {
                    $upload_dir = '../../../uploads/handover_photos/';
                    if (!is_dir($upload_dir)) {
                        mkdir($upload_dir, 0777, true);
                    }
                    
                    $file_ext = pathinfo($_FILES['handover_photo']['name'], PATHINFO_EXTENSION);
                    $filename = 'handover_' . $request_id . '_' . time() . '.' . $file_ext;
                    $target_path = $upload_dir . $filename;
                    
                    if (move_uploaded_file($_FILES['handover_photo']['tmp_name'], $target_path)) {
                        $handover_photo_path = 'uploads/handover_photos/' . $filename;
                    } else {
                        throw new Exception('Failed to upload handover photo');
                    }
                }

                // Update request status - different SQL for claim vs adoption
                if ($request_type === 'claim') {
                    $update_sql = "UPDATE $table SET 
                        status = 'completed', 
                        completedby_admin_id = ?, 
                        handover_photo_path = ?, 
                        receipt_photo_path = ?, 
                        updated_at = NOW() 
                        WHERE id = ?";
                    $update = $conn->prepare($update_sql);
                    $update->bind_param("issi", $admin_id, $handover_photo_path, $receipt_photo_path, $request_id);
                } else {
                    $update_sql = "UPDATE $table SET 
                        status = 'completed', 
                        completedby_admin_id = ?, 
                        handover_photo_path = ?, 
                        updated_at = NOW() 
                        WHERE id = ?";
                    $update = $conn->prepare($update_sql);
                    $update->bind_param("isi", $admin_id, $handover_photo_path, $request_id);
                }
                
                if (!$update->execute()) {
                    throw new Exception('Failed to update request status: ' . $update->error);
                }

                // CANCEL ALL OTHER PENDING/APPROVED REQUESTS FOR THIS DOG
                $other_requests = $conn->prepare("
                    SELECT r.id, r.user_id, u.phone 
                    FROM $table r
                    LEFT JOIN users u ON r.user_id = u.id
                    WHERE r.dog_id = ? 
                    AND r.id != ? 
                    AND r.status IN ('pending', 'approved')
                ");
                $other_requests->bind_param("ii", $dog_id, $request_id);
                $other_requests->execute();
                $other_requests_result = $other_requests->get_result();

                while ($other_request = $other_requests_result->fetch_assoc()) {
                    // Update status to cancelled
                    $cancel_stmt = $conn->prepare("
                        UPDATE $table 
                        SET status = 'cancelled', 
                            cancelledby_admin_id = ?,
                            reason = CONCAT('Automatically cancelled - dog already ', ?),
                            updated_at = NOW()
                        WHERE id = ?
                    ");
                    $cancel_reason = ($request_type === 'claim') ? 'claimed' : 'adopted';
                    $cancel_stmt->bind_param("isi", $admin_id, $cancel_reason, $other_request['id']);
                    $cancel_stmt->execute();
                    
                    // Send SMS notification if not walk-in and has phone number
                    if ($other_request['user_id'] && !empty($other_request['phone'])) {
                        $cancel_message = "Municipal Animal Control:\n";
                        $cancel_message .= "Your $program request for dog #$dog_id has been cancelled.\n";
                        $cancel_message .= "Reason: The dog has already been $cancel_reason by someone else.\n";
                        $cancel_message .= "You may submit a new request for another available dog.";
                        
                        if (!sendSMS($cancel_message, [$other_request['phone']])) {
                            error_log("Failed to send cancellation SMS for request {$other_request['id']}");
                        }
                    }
                }
                
                // Only for claim requests, update the dog_claimers table
                if ($request_type === 'claim') {
                    $first_name = trim($request['first_name']);
                    $middle_name = trim($request['middle_name']);
                    $last_name = trim($request['last_name']);
                    $birthday = $request['birthday'];
                    $barangay_id = $request['barangay_id'];
                    
                    // Check if this person already exists in dog_claimers
                    $check_claimer = $conn->prepare("
                        SELECT id, total_claims 
                        FROM dog_claimers 
                        WHERE first_name = ? 
                        AND last_name = ? 
                        AND birthday = ? 
                        AND barangay_id = ?
                    ");
                    $check_claimer->bind_param("sssi", $first_name, $last_name, $birthday, $barangay_id);
                    $check_claimer->execute();
                    $claimer_result = $check_claimer->get_result();
                    
                    if ($claimer_result->num_rows > 0) {
                        // Existing claimer - increment total_claims
                        $claimer = $claimer_result->fetch_assoc();
                        $new_total = $claimer['total_claims'] + 1;
                        $update_claimer = $conn->prepare("UPDATE dog_claimers SET total_claims = ? WHERE id = ?");
                        $update_claimer->bind_param("ii", $new_total, $claimer['id']);
                        if (!$update_claimer->execute()) {
                            throw new Exception('Failed to update claimer record: ' . $update_claimer->error);
                        }
                    } else {
                        // New claimer - insert with total_claims = 1
                        $insert_claimer = $conn->prepare("
                            INSERT INTO dog_claimers 
                            (first_name, middle_name, last_name, birthday, barangay_id, total_claims) 
                            VALUES (?, ?, ?, ?, ?, 1)
                        ");
                        $insert_claimer->bind_param("ssssi", $first_name, $middle_name, $last_name, $birthday, $barangay_id);
                        if (!$insert_claimer->execute()) {
                            throw new Exception('Failed to create claimer record: ' . $insert_claimer->error);
                        }
                    }
                }
                
                $message .= "COMPLETED\n";
                $message .= "Completed by: $admin_name\n";
                $message .= "Thank you for using our services.";
                break;
                
            case 'cancel':
                $reason = trim($data['reason'] ?? '');
                if (empty($reason)) {
                    throw new Exception('Cancellation reason is required');
                }
                
                // Update request status
                $update_sql = "UPDATE $table SET 
                    status = 'cancelled', 
                    reason = ?, 
                    cancelledby_admin_id = ?, 
                    updated_at = NOW() 
                    WHERE id = ?";
                $update = $conn->prepare($update_sql);
                $update->bind_param("sii", $reason, $admin_id, $request_id);
                
                if (!$update->execute()) {
                    throw new Exception('Failed to cancel request: ' . $update->error);
                }
                
                // Update dog status back to available
                $new_dog_status = ($request_type === 'claim') ? 'for_claiming' : 'for_adoption';
                $dog_update = $conn->prepare("UPDATE dogs SET status = ? WHERE id = ?");
                $dog_update->bind_param("si", $new_dog_status, $dog_id);
                
                if (!$dog_update->execute()) {
                    throw new Exception('Failed to reset dog status: ' . $dog_update->error);
                }
                
                $message .= "CANCELLED\n";
                $message .= "Reason: $reason\n";
                $message .= "Cancelled by: $admin_name\n";
                $message .= "You may submit a new request if needed.";
                break;
                
            default:
                throw new Exception("Invalid action: $action");
        }

        // Commit transaction if all operations succeeded
        $conn->commit();

        // Only send SMS if not walk-in and has phone number
        if (!$is_walkin && $request['user_id']) {
            $phone_stmt = $conn->prepare("SELECT phone FROM users WHERE id = ?");
            $phone_stmt->bind_param("i", $request['user_id']);
            if ($phone_stmt->execute()) {
                $phone_result = $phone_stmt->get_result();
                if ($phone_result->num_rows > 0) {
                    $phone = $phone_result->fetch_assoc()['phone'];
                    if (!empty($phone)) {
                        if (!sendSMS($message, [$phone])) {
                            error_log("SMS sending failed for $request_type $request_id");
                        }
                    }
                }
            }
        }

        $response = ['success' => true, 'message' => ucfirst($action) . ' successful'];
        echo json_encode($response);
        
    } catch (Exception $e) {
        $conn->rollback();
        error_log("Error in update_status.php: " . $e->getMessage() . "\n" . $e->getTraceAsString());
        
        $response = [
            'success' => false,
            'message' => $e->getMessage(),
            'error_details' => 'Action: ' . ($action ?? 'unknown') . 
                             ', Request ID: ' . ($request_id ?? 'unknown') . 
                             ', Type: ' . ($request_type ?? 'unknown')
        ];
        
        echo json_encode($response);
    }
} else {
    echo json_encode([
        'success' => false,
        'message' => 'Invalid request method'
    ]);
}


------------------------------------------------ VICE MAYOR'S OFFICE SUPERADMIN

/vice_mayor/superadmin/management.php:

<?php
session_start();
include '../../includes/db.php';

// Check if superadmin is logged in
if (!isset($_SESSION['vice_mayor_superadmin_id'])) {
    header("Location: ../../includes/auth/login.php");
    exit();
}

// Get superadmin info
$vice_mayor_superadmin_id = $_SESSION['vice_mayor_superadmin_id'];
$superadmin_query = $conn->query("SELECT name, department_id FROM admins WHERE id = $vice_mayor_superadmin_id");
$superadmin_data = $superadmin_query->fetch_assoc();
$superadmin_name = $superadmin_data['name'] ?? 'Vice Mayor SuperAdmin';
$superadmin_dept_id = $superadmin_data['department_id'];

// Filter handling
$where = [];
$params = [];
$types = '';

if (isset($_GET['search']) && !empty($_GET['search'])) {
    $search = '%' . $_GET['search'] . '%';
    $where[] = "(a.name LIKE ? OR a.phone LIKE ?)";
    $params[] = $search;
    $params[] = $search;
    $types .= 'ss';
}

if (isset($_GET['date']) && !empty($_GET['date'])) {
    $where[] = "DATE(a.created_at) = ?";
    $params[] = $_GET['date'];
    $types .= 's';
}

$whereClause = $where ? "WHERE " . implode(" AND ", $where) : "";

$pageTitle = 'Admin Management';
include '../../includes/header.php';

function formatPhoneNumber($phone) {
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

// Get all admin accounts with their department info (only department ID=8)
$admins_query = $conn->prepare("
    SELECT a.id, a.name, a.phone, a.department_id, d.name as department_name, a.created_at 
    FROM admins a 
    JOIN departments d ON a.department_id = d.id
    $whereClause AND a.department_id = 8
    ORDER BY a.created_at DESC
");

if (!empty($params)) {
    $admins_query->bind_param($types, ...$params);
}

$admins_query->execute();
$admins = $admins_query->get_result();
?>


/vice_mayor/superadmin/save_admin.php:

<?php
session_start();
include '../../includes/db.php';

// Check if superadmin is logged in
if (!isset($_SESSION['vice_mayor_superadmin_id'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'message' => 'Unauthorized access']);
    exit();
}

// Initialize response array
$response = ['success' => false, 'message' => ''];

try {
    // Validate required fields
    if (empty($_POST['name']) || empty($_POST['phone']) || empty($_POST['department_id'])) {
        throw new Exception('All fields are required except password when editing');
    }

    // Sanitize inputs
    $id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    $name = trim($_POST['name']);
    $phone = trim($_POST['phone']);
    $department_id = intval($_POST['department_id']);
    $password = isset($_POST['password']) ? trim($_POST['password']) : '';

    // Validate phone format (should be +639XXXXXXXXX)
    if (!preg_match('/^\+63\d{10}$/', $phone)) {
        throw new Exception('Phone number must be in the format +639XXXXXXXXX (12 digits total)');
    }

    // Check if phone already exists (for new admins or when editing)
    $checkPhone = $conn->prepare("SELECT id FROM admins WHERE phone = ? AND id != ?");
    $checkPhone->bind_param("si", $phone, $id);
    $checkPhone->execute();
    $checkPhone->store_result();

    if ($checkPhone->num_rows > 0) {
        throw new Exception('Phone number already exists for another admin');
    }

    if ($id > 0) {
        // Update existing admin
        if (!empty($password)) {
            // Update with password change
            $hashed_password = password_hash($password, PASSWORD_DEFAULT);
            $stmt = $conn->prepare("UPDATE admins SET name = ?, phone = ?, department_id = ?, password = ? WHERE id = ?");
            $stmt->bind_param("ssisi", $name, $phone, $department_id, $hashed_password, $id);
        } else {
            // Update without password change
            $stmt = $conn->prepare("UPDATE admins SET name = ?, phone = ?, department_id = ? WHERE id = ?");
            $stmt->bind_param("ssii", $name, $phone, $department_id, $id);
        }
    } else {
        // Create new admin (password is required)
        if (empty($password)) {
            throw new Exception('Password is required for new admin');
        }
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        $stmt = $conn->prepare("INSERT INTO admins (name, phone, department_id, password) VALUES (?, ?, ?, ?)");
        $stmt->bind_param("ssis", $name, $phone, $department_id, $hashed_password);
    }

    if ($stmt->execute()) {
        $response['success'] = true;
        $response['message'] = $id > 0 ? 'Admin updated successfully' : 'Admin created successfully';
    } else {
        throw new Exception('Database error: ' . $stmt->error);
    }

    $stmt->close();
} catch (Exception $e) {
    $response['message'] = $e->getMessage();
}

header('Content-Type: application/json');
echo json_encode($response);
?>


------------------------------------------------ ASSISTANCE ADMIN PANEL

/vice_mayor/assistance/admin/pending.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['assistance_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$assistance_admin_id = $_SESSION['assistance_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $assistance_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'Pending';
include '../../../includes/header.php';

function formatPhoneNumber($phone) {
    // Convert +639 to 09
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all pending requests
$stmt = $conn->prepare("
    SELECT ar.id, at.name as program, at.parent_id,
           ar.last_name, ar.first_name, ar.middle_name, ar.birthday,
           u.phone, ar.created_at, b.name as barangay
    FROM assistance_requests ar
    JOIN assistance_types at ON ar.assistance_id = at.id
    JOIN users u ON ar.user_id = u.id
    LEFT JOIN barangays b ON ar.barangay_id = b.id
    WHERE ar.status = 'pending'
    ORDER BY ar.id ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Get all programs for filter dropdown
$programsQuery = "SELECT id, name, parent_id FROM assistance_types ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name";
$programs = $conn->query($programsQuery);

// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

// Calculate next Monday's date
$nextMonday = new DateTime();
$nextMonday->modify('next monday');
$nextMondayStr = $nextMonday->format('Y-m-d');

// Prepare the queue date for JavaScript
$queueDateData = json_encode([
    'success' => true,
    'queue_date' => $nextMondayStr
]);
?>


/vice_mayor/assistance/admin/approved.php:

<?php
session_start();
include '../../../includes/db.php';

if (!isset($_SESSION['assistance_admin_id'])) {
    header("Location: ../../../includes/auth/login.php");
    exit();
}

// Get admin info
$assistance_admin_id = $_SESSION['assistance_admin_id'];
$admin_query = $conn->query("SELECT name FROM admins WHERE id = $assistance_admin_id");
$admin_data = $admin_query->fetch_assoc();
$admin_name = $admin_data['name'] ?? 'Admin';

$pageTitle = 'Approved';
include '../../../includes/header.php';

function calculateAge($birthday) {
    if (empty($birthday)) return 'N/A';
    
    $birthDate = new DateTime($birthday);
    $today = new DateTime();
    $age = $today->diff($birthDate)->y;
    return $age . ' years old';
}

// Get all approved requests with queue information, grouped by queue_date
$stmt = $conn->prepare("
    SELECT ar.id, at.name as program, at.parent_id,
           ar.last_name, ar.first_name, ar.middle_name, ar.birthday,
           u.phone, ar.updated_at, ar.queue_date,
           ar.status, ar.approvedby_admin_id, ar.completedby_admin_id, ar.released_date,
           ar.recipient, ar.relation_to_recipient, b.name as barangay,
           ar.reschedule_count, ar.amount, ar.is_walkin,
           a.name as admin_name, ar.user_id
    FROM assistance_requests ar
    JOIN assistance_types at ON ar.assistance_id = at.id
    LEFT JOIN users u ON ar.user_id = u.id
    LEFT JOIN barangays b ON ar.barangay_id = b.id
    LEFT JOIN admins a ON ar.walkin_admin_id = a.id
    WHERE ar.status = 'approved'
    ORDER BY ar.is_walkin DESC, ar.queue_date ASC, ar.updated_at ASC
");
$stmt->execute();
$result = $stmt->get_result();

// Separate walk-ins and regular requests
$walkInRequests = [];
$regularRequests = [];

while ($row = $result->fetch_assoc()) {
    if ($row['is_walkin'] == 1) {
        $walkInRequests[] = $row;
    } else {
        $queueDate = $row['queue_date'];
        if (!isset($regularRequests[$queueDate])) {
            $regularRequests[$queueDate] = [];
        }
        $regularRequests[$queueDate][] = $row;
    }
}

// Calculate next Monday's date for default reschedule
$nextMonday = new DateTime();
$nextMonday->modify('next monday');
$nextMondayStr = $nextMonday->format('Y-m-d');

// Get all programs for filter dropdown
$programs = $conn->query("
    SELECT id, name, parent_id 
    FROM assistance_types 
    ORDER BY COALESCE(parent_id, id), parent_id IS NOT NULL, name
");

// Store programs in an array for later use
$programsArray = [];
while ($program = $programs->fetch_assoc()) {
    $programsArray[] = $program;
}

// Reset pointer for dropdown display
$programs->data_seek(0);

// Get all barangays for filter dropdown
$barangays = $conn->query("SELECT id, name FROM barangays ORDER BY name");

function formatPhoneNumber($phone) {
    if (empty($phone)) return 'Walk-in';
    // Convert +639 to 09
    if (strpos($phone, '+63') === 0) {
        return '0' . substr($phone, 3);
    }
    return $phone;
}
?>


/vice_mayor/assistance/admin/update_status.php:

<?php
session_start();
require_once '../../../includes/db.php';
require '../../../includes/send_sms.php';
// Include the file deletion function
require_once '../../../includes/delete_request_files.php';

date_default_timezone_set('Asia/Manila');

if (!isset($_SESSION['assistance_admin_id'])) {
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit;
}

$assistance_admin_id = $_SESSION['assistance_admin_id'];

header('Content-Type: application/json');

// Helper function for ordinal numbers
function ordinal($number) {
    $suffixes = ['th', 'st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
    if (($number % 100) >= 11 && ($number % 100) <= 13) {
        return $number . 'th';
    }
    return $number . $suffixes[$number % 10];
}

// Helper function to format phone numbers
function formatPhoneNumber($phone) {
    // Remove all non-numeric characters
    $phone = preg_replace('/[^0-9]/', '', $phone);
    
    // If starts with 0, convert to +63 format
    if (strpos($phone, '0') === 0) {
        return '+63' . substr($phone, 1);
    }
    
    // If starts with 63, add +
    if (strpos($phone, '63') === 0) {
        return '+' . $phone;
    }
    
    // If starts with +, leave as is
    if (strpos($phone, '+') === 0) {
        return $phone;
    }
    
    // Default: assume it's missing country code
    return '+63' . $phone;
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if (!isset($_POST['action'])) {
            throw new Exception('No action specified');
        }

        $action = $_POST['action'];

        // Handle inquiry answer action
        if ($action === 'answer_inquiry' && isset($_POST['inquiry_id']) && isset($_POST['answer'])) {
            $inquiry_id = intval($_POST['inquiry_id']);
            $answer = trim($_POST['answer']);
            
            if (empty($answer)) {
                header('HTTP/1.1 400 Bad Request');
                echo json_encode(['success' => false, 'error' => 'Answer cannot be empty']);
                exit;
            }
            
            try {
                // First get the inquiry details for SMS
                $stmt = $conn->prepare("
                    SELECT i.*, u.phone, u.name as user_name, d.name as department_name
                    FROM inquiries i
                    JOIN users u ON i.user_id = u.id
                    JOIN departments d ON i.department_id = d.id
                    WHERE i.id = ?
                ");
                $stmt->bind_param("i", $inquiry_id);
                $stmt->execute();
                $result = $stmt->get_result();
                
                if ($result->num_rows === 0) {
                    header('HTTP/1.1 404 Not Found');
                    echo json_encode(['success' => false, 'error' => 'Inquiry not found']);
                    exit;
                }
                
                $inquiry = $result->fetch_assoc();
                
                // Get admin name for SMS
                $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
                $admin_stmt->bind_param("i", $assistance_admin_id);
                $admin_stmt->execute();
                $admin_result = $admin_stmt->get_result();
                $admin = $admin_result->fetch_assoc();
                $admin_name = $admin['name'] ?? 'Admin';
                
                // Update the inquiry
                $update_stmt = $conn->prepare("UPDATE inquiries 
                                       SET answer = ?, status = 'answered', 
                                           answeredby_admin_id = ?, updated_at = NOW() 
                                       WHERE id = ?");
                $update_stmt->bind_param("sii", $answer, $assistance_admin_id, $inquiry_id);
                
                if (!$update_stmt->execute()) {
                    header('HTTP/1.1 500 Internal Server Error');
                    echo json_encode(['success' => false, 'error' => 'Failed to update inquiry: ' . $conn->error]);
                    exit;
                }
                
                // Send SMS notification
                $phone = $inquiry['phone'];
                $formatted_phone = formatPhoneNumber($phone);

                $sms_message = "Vice Mayor Assistance Inquiry Response:\n";
                $sms_message .= "Your question: " . substr($inquiry['question'], 0, 50) . (strlen($inquiry['question']) > 50 ? "..." : "") . "\n";
                $sms_message .= "Our response: " . substr($answer, 0, 100) . (strlen($answer) > 100 ? "..." : "") . "\n";
                $sms_message .= "Answered by: $admin_name\n";
                $sms_message .= "Thank you for contacting us!";

                $sms_sent = false;
                try {
                    // Add debug logging
                    error_log("Attempting to send SMS to: " . $formatted_phone);
                    error_log("SMS content: " . $sms_message);
                    
                    $sms_sent = sendSMS($sms_message, [$formatted_phone]);
                    
                    if (!$sms_sent) {
                        error_log("SMS sending returned false");
                    }
                } catch (Exception $e) {
                    error_log("SMS sending failed: " . $e->getMessage());
                }
                
                echo json_encode([
                    'success' => true, 
                    'message' => 'Inquiry answered successfully' . ($sms_sent ? '' : ' (but SMS failed to send)'),
                    'debug' => [
                        'phone' => $formatted_phone,
                        'sms_function' => function_exists('sendSMS') ? 'exists' : 'missing',
                        'sms_result' => $sms_sent
                    ]
                ]);
                exit;
            } catch (Exception $e) {
                header('HTTP/1.1 500 Internal Server Error');
                echo json_encode(['success' => false, 'error' => $e->getMessage()]);
                exit;
            }
        }

        // Handle batch reschedule_past_due action
        if ($action === 'reschedule_past_due' && isset($_POST['date'])) {
            $currentDate = $_POST['date'];
            $newDate = $_POST['new_date'];
            
            if (empty($newDate)) {
                throw new Exception('Please select a valid date');
            }
            
            // Get admin name for the message
            $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
            $admin_stmt->bind_param("i", $assistance_admin_id);
            $admin_stmt->execute();
            $admin_result = $admin_stmt->get_result();
            $admin = $admin_result->fetch_assoc();
            $admin_name = $admin['name'];
            
            // Get all requests for the current date (including walk-ins)
            $stmt = $conn->prepare("
                SELECT ar.id, u.phone, at.name as program_name, ar.reschedule_count, ar.is_walkin
                FROM assistance_requests ar
                LEFT JOIN users u ON ar.user_id = u.id
                JOIN assistance_types at ON ar.assistance_id = at.id
                WHERE ar.status = 'approved' AND ar.queue_date = ?
            ");
            $stmt->bind_param("s", $currentDate);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows === 0) {
                throw new Exception('No requests found for this date');
            }
            
            $successCount = 0;
            $failedCount = 0;
            $formattedNewDate = date('l, F d, Y', strtotime($newDate));
            
            while ($request = $result->fetch_assoc()) {
                $request_id = $request['id'];
                $phone = $request['phone'];
                $program_name = $request['program_name'];
                $reschedule_count = $request['reschedule_count'] + 1;
                $is_walkin = $request['is_walkin'];
                
                // Only send SMS for non-walkin requests
                if (!$is_walkin) {
                    $message = "Vice Mayor Assistance:\n";
                    $message .= "Request #$request_id ($program_name) - RESCHEDULED\n";
                    $message .= "New Date: $formattedNewDate\n";
                    $message .= "This is your " . ordinal($reschedule_count) . " reschedule\n";
                    $message .= "Processed by: $admin_name";
                    
                    $sms_sent = sendSMS($message, [$phone]);
                } else {
                    $sms_sent = true; // Skip SMS for walk-ins
                }
                
                $update = $conn->prepare("
                    UPDATE assistance_requests 
                    SET queue_date = ?,
                        reschedule_count = ?,
                        rescheduledby_admin_id = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("siii", $newDate, $reschedule_count, $assistance_admin_id, $request_id);
                
                if ($update->execute()) {
                    if ($sms_sent) {
                        $successCount++;
                    } else {
                        $failedCount++;
                    }
                } else {
                    $failedCount++;
                }
            }
            
            if ($successCount > 0) {
                echo json_encode([
                    'success' => true,
                    'message' => "Rescheduled $successCount requests" . ($failedCount > 0 ? " ($failedCount failed)" : "")
                ]);
            } else {
                throw new Exception('Failed to reschedule any requests');
            }
            exit;
        }

        if (!isset($_POST['id'])) {
            throw new Exception('Request ID not provided');
        }

        $request_id = intval($_POST['id']);
        $is_walkin = isset($_POST['is_walkin']) ? (int)$_POST['is_walkin'] : 0;
        
        // Get admin name for the message
        $admin_stmt = $conn->prepare("SELECT name FROM admins WHERE id = ?");
        $admin_stmt->bind_param("i", $assistance_admin_id);
        $admin_stmt->execute();
        $admin_result = $admin_stmt->get_result();
        $admin = $admin_result->fetch_assoc();
        $admin_name = $admin['name'];
        
        // Modified query to handle walk-ins (which may not have user_id)
        $stmt = $conn->prepare("
            SELECT ar.*, u.phone, at.name as program_name 
            FROM assistance_requests ar
            LEFT JOIN users u ON ar.user_id = u.id
            JOIN assistance_types at ON ar.assistance_id = at.id
            WHERE ar.id = ?
        ");
        $stmt->bind_param("i", $request_id);
        $stmt->execute();
        $result = $stmt->get_result();
        
        if ($result->num_rows === 0) {
            throw new Exception('Request not found');
        }

        $request = $result->fetch_assoc();
        $phone = $request['phone'];
        $program_name = $request['program_name'];
        $current_status = $request['status'];

        switch ($action) {
            case 'approve':
                $queue_date = trim($_POST['queue_date'] ?? '');
                
                if (empty($queue_date)) {
                    throw new Exception('Please select a queue date');
                }
                
                if (!$is_walkin) {
                    $message = "Vice Mayor Assistance:\n";
                    $message .= "Request #$request_id ($program_name) - APPROVED\n";
                    $message .= "Scheduled on: " . date('l, F d, Y', strtotime($queue_date)) . "\n";
                    $message .= "Approved by: $admin_name\n";
                    $message .= "Please bring a valid ID and requirements on your scheduled date at the Municipal Hall.";
                }
                
                $update = $conn->prepare("
                    UPDATE assistance_requests 
                    SET status = 'approved', 
                        approvedby_admin_id = ?,
                        queue_date = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("isi", $assistance_admin_id, $queue_date, $request_id);
                
                if (!$update->execute()) {
                    throw new Exception('Failed to update database');
                }
                
                if (!$is_walkin && !sendSMS($message, [$phone])) {
                    throw new Exception('Failed to send SMS notification');
                }
                
                echo json_encode(['success' => true]);
                break;
                
            case 'complete':
                $recipient = trim($_POST['recipient'] ?? '');
                $relation = trim($_POST['relation_to_recipient'] ?? '');
                $released_date = trim($_POST['released_date'] ?? date('Y-m-d'));
                $amount = isset($_POST['amount']) ? floatval($_POST['amount']) : null;
                
                if (empty($recipient)) {
                    throw new Exception('Please enter recipient name');
                }
                
                if (!$is_walkin) {
                    $formatted_date = date('l, F d, Y', strtotime($released_date));
                    $message = "Vice Mayor Assistance:\n";
                    $message .= "Request #$request_id ($program_name) - COMPLETED\n";
                    $message .= "Released on: $formatted_date\n";
                    $message .= "Recipient: $recipient\n";
                    if (!empty($relation)) {
                        $message .= "Relation: $relation\n";
                    }
                    $message .= "Completed by: $admin_name\n";
                    $message .= "You may apply again next month if you still need assistance.";
                }
                
                $update = $conn->prepare("
                    UPDATE assistance_requests 
                    SET status = 'completed', 
                        completedby_admin_id = ?,
                        recipient = ?,
                        relation_to_recipient = ?,
                        released_date = ?,
                        amount = ?,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("isssdi", $assistance_admin_id, $recipient, $relation, $released_date, $amount, $request_id);
                
                if (!$update->execute()) {
                    throw new Exception('Failed to update database');
                }
                
                if (!$is_walkin && !sendSMS($message, [$phone])) {
                    throw new Exception('Failed to send SMS notification');
                }
                
                echo json_encode(['success' => true]);
                break;
                
            case 'decline':
                $reason = trim($_POST['reason'] ?? '');
                
                if (empty($reason)) {
                    throw new Exception('Please provide a reason for declining');
                }
                
                // Determine if this should be a cancellation (if previously approved)
                $is_cancellation = ($request['status'] === 'approved');
                $status_to_set = $is_cancellation ? 'cancelled' : 'declined';
                
                if (!$is_walkin) {
                    $message = "Vice Mayor Assistance:\n";
                    $message .= "Request #$request_id ($program_name) - " . strtoupper($status_to_set) . "\n";
                    $message .= "Reason: $reason\n";
                    $message .= $is_cancellation ? "Cancelled by: $admin_name\n" : "Declined by: $admin_name\n";
                    $message .= "You may apply again if you still need assistance.";
                }
                
                $update = $conn->prepare("
                    UPDATE assistance_requests 
                    SET status = ?,
                        reason = ?,
                        " . ($is_cancellation ? "cancelledby_admin_id" : "declinedby_admin_id") . " = ?,
                        queue_date = NULL,
                        updated_at = NOW()
                    WHERE id = ?
                ");
                $update->bind_param("ssii", $status_to_set, $reason, $assistance_admin_id, $request_id);
                
                if (!$update->execute()) {
                    throw new Exception('Failed to update database');
                }
                
                // Delete the uploaded files for this request
                $filesDeleted = deleteRequestFiles('assistance_requests', $request_id, $conn);
                
                // Clear file references from database
                $referencesCleared = clearFileReferences('assistance_requests', $request_id, $conn);
                
                if (!$is_walkin && !sendSMS($message, [$phone])) {
                    throw new Exception('Failed to send SMS notification');
                }
                
                $response = ['success' => true];
                
                // Add file deletion status to response for debugging
                if (!$filesDeleted || !$referencesCleared) {
                    $response['warning'] = 'Request processed but some files may not have been deleted properly';
                }
                
                echo json_encode($response);
                break;
                
            default:
                throw new Exception('Invalid action');
        }
    } catch (Exception $e) {
        echo json_encode([
            'success' => false,
            'error' => $e->getMessage()
        ]);
    }
} else {
    echo json_encode([
        'success' => false,
        'error' => 'Invalid request method'
    ]);
}


------------------------------------------------ SCRIPTS

/scripts/run_monthly_reports.php:

<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Get the absolute root path of the project
$root_dir = dirname(__DIR__); // Goes up one level from scripts directory

// Verify dependencies exist before loading
$db_path = $root_dir . '/includes/db.php';
$vendor_path = $root_dir . '/vendor/autoload.php';

if (!file_exists($db_path)) {
    die("Error: DB file missing at: $db_path");
}
if (!file_exists($vendor_path)) {
    die("Error: Vendor autoload missing at: $vendor_path");
}

require_once $db_path;
require_once $vendor_path;

date_default_timezone_set('Asia/Manila');

// Configuration - using absolute paths
$reports = [
    'mswd' => [
        'script' => $root_dir . '/scripts/scheduled_reports/mayor/monthly_mswd_report.php',
        'output_dir' => $root_dir . '/reports/mayor/mswd/scheduled/'
    ],
    'animal' => [
        'script' => $root_dir . '/scripts/scheduled_reports/mayor/monthly_animal_report.php',
        'output_dir' => $root_dir . '/reports/mayor/animal/scheduled/'
    ],
    'assistance' => [
        'script' => $root_dir . '/scripts/scheduled_reports/vice_mayor/monthly_assistance_report.php',
        'output_dir' => $root_dir . '/reports/vice_mayor/assistance/scheduled/'
    ],
    // 'ambulance' => [
    //     'script' => $root_dir . '/scripts/scheduled_reports/vice_mayor/monthly_ambulance_report.php',
    //     'output_dir' => $root_dir . '/reports/vice_mayor/ambulance/scheduled/'
    // ]
];

// Initialize log
$logContent = "=== Report Generation Started ===\n";
$logContent .= "Date: " . date('Y-m-d H:i:s') . "\n";
$logContent .= "Root Directory: " . $root_dir . "\n\n";

$successCount = 0;

foreach ($reports as $reportName => $config) {
    $logContent .= "Processing $reportName report...\n";
    $logContent .= "Script Path: {$config['script']}\n";
    $logContent .= "Output Dir: {$config['output_dir']}\n";
    
    try {
        // Verify and create output directory with strict permissions
        if (!file_exists($config['output_dir'])) {
            if (!mkdir($config['output_dir'], 0755, true)) {
                throw new Exception("Failed to create directory: {$config['output_dir']}");
            }
            $logContent .= "Created directory: {$config['output_dir']}\n";
        }
        
        // Verify directory is writable
        if (!is_writable($config['output_dir'])) {
            throw new Exception("Directory not writable: {$config['output_dir']}");
        }

        // Verify script exists
        if (!file_exists($config['script'])) {
            throw new Exception("Script not found: {$config['script']}");
        }

        // Include the report script
        ob_start();
        include $config['script'];
        $output = ob_get_clean();
        
        if (empty(trim($output))) {
            throw new Exception("Script produced no output");
        }
        
        $logContent .= "SUCCESS: $reportName report generated\n";
        $logContent .= "Output: " . trim($output) . "\n\n";
        $successCount++;
        
    } catch (Exception $e) {
        if (ob_get_level() > 0) ob_end_clean();
        $logContent .= "ERROR: Failed to generate $reportName report\n";
        $logContent .= "Exception: " . $e->getMessage() . "\n\n";
        continue;
    }
}

// Final summary
$logContent .= "\n=== Summary ===\n";
$logContent .= "Successful reports: $successCount\n";
$logContent .= "Failed reports: " . (count($reports) - $successCount) . "\n";

// Save log to reports directory
$log_path = $root_dir . '/scripts/report_log.txt';
if (!file_put_contents($log_path, $logContent, FILE_APPEND)) {
    $logContent .= "\nWARNING: Could not write to log file at $log_path\n";
}

// Output
header('Content-Type: text/plain');
echo $logContent;


/includes/delete_request_files.php:

<?php
/**
 * Delete uploaded files for cancelled/declined requests (MySQLi version)
 * 
 * @param string $tableName Name of the table
 * @param int $requestId ID of the request
 * @param mysqli $conn Database connection
 * @return bool True if files were deleted successfully
 */
function deleteRequestFiles($tableName, $requestId, $conn) {
    // Get the file paths from the database
    $filePaths = [];
    
    try {
        switch ($tableName) {
            case 'ambulance_requests':
                $stmt = $conn->prepare("SELECT patient_id_path, requester_id_path FROM ambulance_requests WHERE id = ?");
                $stmt->bind_param("i", $requestId);
                $stmt->execute();
                $result = $stmt->get_result();
                $row = $result->fetch_assoc();
                if ($row) {
                    if (!empty($row['patient_id_path'])) $filePaths[] = $row['patient_id_path'];
                    if (!empty($row['requester_id_path'])) $filePaths[] = $row['requester_id_path'];
                }
                break;
                
            case 'assistance_requests':
                $stmt = $conn->prepare("SELECT specific_request_path, indigency_cert_path, id_copy_path, id_copy_path_2, request_letter_path FROM assistance_requests WHERE id = ?");
                $stmt->bind_param("i", $requestId);
                $stmt->execute();
                $result = $stmt->get_result();
                $row = $result->fetch_assoc();
                if ($row) {
                    $fields = ['specific_request_path', 'indigency_cert_path', 'id_copy_path', 'id_copy_path_2', 'request_letter_path'];
                    foreach ($fields as $field) {
                        if (!empty($row[$field])) $filePaths[] = $row[$field];
                    }
                }
                break;
                
            case 'mswd_requests':
                $stmt = $conn->prepare("SELECT requirement_path_1, requirement_path_2, requirement_path_3, requirement_path_4, requirement_path_5, requirement_path_6, requirement_path_7, requirement_path_8 FROM mswd_requests WHERE id = ?");
                $stmt->bind_param("i", $requestId);
                $stmt->execute();
                $result = $stmt->get_result();
                $row = $result->fetch_assoc();
                if ($row) {
                    for ($i = 1; $i <= 8; $i++) {
                        $field = "requirement_path_$i";
                        if (!empty($row[$field])) $filePaths[] = $row[$field];
                    }
                }
                break;
                
            case 'rabid_reports':
                $stmt = $conn->prepare("SELECT proof_path FROM rabid_reports WHERE id = ?");
                $stmt->bind_param("i", $requestId);
                $stmt->execute();
                $result = $stmt->get_result();
                $row = $result->fetch_assoc();
                if ($row && !empty($row['proof_path'])) {
                    $filePaths[] = $row['proof_path'];
                }
                break;
                
            default:
                error_log("Unknown table: $tableName");
                return false;
        }
        
        // Delete the files
        $success = true;
        foreach ($filePaths as $filePath) {
            // Handle relative paths that start with ../../
            if (strpos($filePath, '../') === 0) {
                // For relative paths, resolve them relative to the current script's directory
                $scriptDir = dirname(__FILE__);
                $fullPath = realpath($scriptDir . '/' . $filePath);
            } else {
                // For absolute paths or paths relative to document root
                // Remove any leading slashes or dots to make it relative to document root
                $cleanPath = ltrim($filePath, '/.');
                $fullPath = $_SERVER['DOCUMENT_ROOT'] . '/' . $cleanPath;
            }
            
            // Check if the file exists and is within the document root for security
            if ($fullPath && file_exists($fullPath) && strpos($fullPath, $_SERVER['DOCUMENT_ROOT']) === 0) {
                if (!unlink($fullPath)) {
                    error_log("Failed to delete file: $fullPath (original path: $filePath)");
                    $success = false;
                } else {
                    error_log("Successfully deleted file: $fullPath");
                }
            } else {
                error_log("File not found, invalid path, or outside document root: $fullPath (original path: $filePath)");
                $success = false;
            }
        }
        
        return $success;
        
    } catch (Exception $e) {
        error_log("Error in deleteRequestFiles: " . $e->getMessage());
        return false;
    }
}

/**
 * Clear file references from database after deletion
 * 
 * @param string $tableName Name of the table
 * @param int $requestId ID of the request
 * @param mysqli $conn Database connection
 * @return bool True if update was successful
 */
function clearFileReferences($tableName, $requestId, $conn) {
    try {
        switch ($tableName) {
            case 'ambulance_requests':
                $sql = "UPDATE ambulance_requests SET patient_id_path = NULL, requester_id_path = NULL WHERE id = ?";
                break;
                
            case 'assistance_requests':
                $sql = "UPDATE assistance_requests SET specific_request_path = NULL, indigency_cert_path = NULL, id_copy_path = NULL, id_copy_path_2 = NULL, request_letter_path = NULL WHERE id = ?";
                break;
                
            case 'mswd_requests':
                $sql = "UPDATE mswd_requests SET requirement_path_1 = NULL, requirement_path_2 = NULL, requirement_path_3 = NULL, requirement_path_4 = NULL, requirement_path_5 = NULL, requirement_path_6 = NULL, requirement_path_7 = NULL, requirement_path_8 = NULL WHERE id = ?";
                break;
                
            case 'rabid_reports':
                $sql = "UPDATE rabid_reports SET proof_path = NULL WHERE id = ?";
                break;
                
            default:
                return false;
        }
        
        $stmt = $conn->prepare($sql);
        $stmt->bind_param("i", $requestId);
        return $stmt->execute();
        
    } catch (Exception $e) {
        error_log("Error in clearFileReferences: " . $e->getMessage());
        return false;
    }
}

/**
 * Main function to handle request cancellation/declination with file deletion
 * 
 * @param string $tableName Name of the table
 * @param int $requestId ID of the request
 * @param mysqli $conn Database connection
 * @return bool True if operation was successful
 */
function handleRequestCancellation($tableName, $requestId, $conn) {
    // First delete the files
    $filesDeleted = deleteRequestFiles($tableName, $requestId, $conn);
    
    // Then clear the file references from database
    $referencesCleared = clearFileReferences($tableName, $requestId, $conn);
    
    return $filesDeleted && $referencesCleared;
}